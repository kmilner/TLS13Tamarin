theory TLS_13_lemmas begin

// Function signature and definition of the equational theory E

builtins: diffie-hellman
functions: Expand/3, Extract/2, fst/1, h/1, hmac/1, mac/1, mask/2,
           pair/2, pk/1, sdec/2, senc/2, sign/2, snd/1, true/0, unmask/2,
           verify/3
equations:
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2,
    unmask(mask(x, y), x) = y,
    unmask(mask(x, y), y) = x,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true



/* looping facts with injective instances: DHExp/3, F_State_C1/29
*/

section{* TLS 1.3 *}

restriction Eq_check_succeed:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"
  // safety formula

restriction Neq_check_succeed:
  "∀ x y #i. (Neq( x, y ) @ #i) ⇒ (¬(x = y))"
  // safety formula

restriction one_ltk:
  "∀ A x y #i #j.
    ((GenLtk( A, x ) @ #i) ∧ (GenLtk( A, y ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction one_role_per_actor:
  "∀ actor tid tid2 role role2 #i #j.
    ((Start( tid, actor, role ) @ #i) ∧
     (Start( tid2, actor, role2 ) @ #j)) ⇒
    (role = role2)"
  // safety formula

rule (modulo E) Register_pk:
   [ Fr( ~ltkA ) ]
  --[ GenLtk( $A, ~ltkA ), HonestUse( ~ltkA ) ]->
   [ !Ltk( $A, ~ltkA ), !Pk( $A, pk(~ltkA) ), Out( pk(~ltkA) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_Ltk:
   [ !Ltk( $A, ~ltkA ) ] --[ RevLtk( $A ) ]-> [ Out( ~ltkA ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Register_dc:
   [ !Ltk( $S, ~ltkS ), !Pk( $E, pk(~ltkE) ) ]
  --[
  RegisterDC( $E, $S, ~ltkS, pk(~ltkE) ),
  UseLtk( ~ltkS,
          sign(<'TLSserverdelegatedcredentials', pk(~ltkS), 
                <'time', $sig_alg, pk(~ltkE)>, $sig_alg>,
               ~ltkS)
  )
  ]->
   [
   !DC( $E, $S,
        <'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
         sign(<'TLSserverdelegatedcredentials', pk(~ltkS), 
               <'time', $sig_alg, pk(~ltkE)>, $sig_alg>,
              ~ltkS)
        >
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) client_hello:
   [ Fr( ~nc ), Fr( ~x ) ]
  --[
  C0( ~nc ), Start( ~nc, $C, 'client' ),
  RIdentity( ~nc, $C, 'client', $C ), Neq( $g1, $g2 ),
  DH( ~nc, $C, ~x ), HonestUse( ~x ), HonestUse( $g1^~x )
  ]->
   [
   F_State_C1( ~nc, $C, $S, '0',
               <'0', '1', '0x0303', ~nc, '0', $cipher_suites, '0', 
                <'43', '0x0304'>, <'10', $g1, $g2>, <'13', $sig_algs>, '40', $g1, 
                $g1^~x>,
               ~nc, '0', $g1, <$g1, $g2>, '0', ~x, '0', $g1^~x, '0', '0', 'na',
               '0', '0', Extract('0', '0'), '0', '0', '0', '0', '0', '0',
               <'0', '0'>, '0', '0', '0'
   ),
   DHExp( ~x, ~nc, $C ),
   Out( <'1', '0x0303', ~nc, '0', $cipher_suites, '0', 
         <'43', '0x0304'>, <'10', $g1, $g2>, <'13', $sig_algs>, '40', $g1, 
         $g1^~x>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) recv_hello_retry_request:
   [
   F_State_C1( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, $g1,
               <$g1, $g2>, '0', p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode,
               p_psk_id, p_edi, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc,
               p_hs_keys, p_auth_status, p_ems, p_rms, p_cert_req
   ),
   Fr( ~new_x ), In( <'6', '0x0303', '40', $g2> ),
   DHExp( p_x, ~tid, $C )
   ]
  --[
  C1_retry( ~tid ), Neq( $g1, $g2 ), Instance( ~tid, $C, 'client' ),
  DeleteDH( ~tid, $C, p_x ), DH( ~tid, $C, ~new_x )
  ]->
   [
   Out( <'1', '0x0303', p_nc, '0', $cipher_suites, '0', 
         <'43', '0x0304'>, <'10', $g1, $g2>, <'13', $sig_algs>, '40', $g2, 
         $g2^~new_x>
   ),
   DHExp( ~new_x, ~tid, $C ),
   F_State_C1( ~tid, $C, $S, p_res_psk,
               <<p_messages, '6', '0x0303', '40', $g2>, '1', '0x0303', p_nc, '0', 
                $cipher_suites, '0', <'43', '0x0304'>, <'10', $g1, $g2>, 
                <'13', $sig_algs>, '40', $g2, $g2^~new_x>,
               p_nc, p_ns, $g2, <$g1, $g2>, 'hrr', ~new_x, p_y, $g2^~new_x, p_gy,
               p_gxy, 'na', p_psk_id, p_edi, Extract(p_res_psk, '0'), p_hs, p_ms,
               p_cats, p_sats, p_hs_keyc, p_hs_keys, <'0', '0'>, p_ems, p_rms,
               p_cert_req
   )
   ]

  // loop breaker: [3]
  /* has exactly the trivial AC variant */

rule (modulo E) recv_server_hello:
   [
   F_State_C1( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, $g,
               p_sg, p_hrr, ~x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id,
               p_edi, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
               p_auth_status, p_ems, p_rms, p_cert_req
   )[no_precomp],
   In( <'2', '0x0303', new_ns, $cipher_suite, <'13', $sig_algs>, 
        '40', $g, $g^new_y>
   )
   ]
  --[
  C1( ~tid ), Instance( ~tid, $C, 'client' ), Neq( $g^new_y, $g ),
  Neq( $g^new_y^~x, $g ),
  DHChal( $g, ~x, new_y, p_gx, $g^new_y, $g^new_y^~x ),
  RNonces( ~tid, $C, 'client', <p_nc, new_ns> )
  ]->
   [
   F_State_C2a( ~tid, $C, $S, p_res_psk,
                <p_messages, '2', '0x0303', new_ns, $cipher_suite, 
                 <'13', $sig_algs>, '40', $g, $g^new_y>,
                p_nc, new_ns, $g, p_sg, p_hrr, ~x, p_y, p_gx, $g^new_y,
                $g^new_y^~x, 'na', p_psk_id, p_edi, p_es, p_hs, p_ms, p_cats,
                p_sats, p_hs_keyc, p_hs_keys, <'0', '0'>, p_ems, p_rms, p_cert_req
   )
   ]

  /*
  rule (modulo AC) recv_server_hello:
     [
     F_State_C1( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, $g,
                 p_sg, p_hrr, ~x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id,
                 p_edi, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
                 p_auth_status, p_ems, p_rms, p_cert_req
     )[no_precomp],
     In( <'2', '0x0303', new_ns, $cipher_suite, <'13', $sig_algs>, 
          '40', $g, z>
     )
     ]
    --[
    C1( ~tid ), Instance( ~tid, $C, 'client' ), Neq( z, $g ),
    Neq( z.1, $g ), DHChal( $g, ~x, new_y, p_gx, z, z.1 ),
    RNonces( ~tid, $C, 'client', <p_nc, new_ns> )
    ]->
     [
     F_State_C2a( ~tid, $C, $S, p_res_psk,
                  <p_messages, '2', '0x0303', new_ns, $cipher_suite, 
                   <'13', $sig_algs>, '40', $g, z>,
                  p_nc, new_ns, $g, p_sg, p_hrr, ~x, p_y, p_gx, z, z.1, 'na',
                  p_psk_id, p_edi, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc,
                  p_hs_keys, <'0', '0'>, p_ems, p_rms, p_cert_req
     )
     ]
    variants (modulo AC)
    1. $g    = $g.44
       ~x    = ~x.47
       new_y = inv(~x.47)
       z     = $g.44^inv(~x.47)
       z.1   = $g.44
    
    2. $g    = $g.44
       ~x    = ~x.47
       new_y = one
       z     = $g.44
       z.1   = $g.44^~x.47
    
    3. $g    = $g.46
       ~x    = ~x.49
       new_y = new_y.51
       z     = $g.46^new_y.51
       z.1   = $g.46^(~x.49*new_y.51)
    
    4. $g    = $g.277
       ~x    = ~x.280
       new_y = inv((~x.280*x.549))
       z     = $g.277^inv((~x.280*x.549))
       z.1   = $g.277^inv(x.549)
    
    5. $g    = $g.277
       ~x    = ~x.280
       new_y = (x.549*inv(~x.280))
       z     = $g.277^(x.549*inv(~x.280))
       z.1   = $g.277^x.549
    
    6. $g    = $g.278
       ~x    = ~x.281
       new_y = (x.550*inv((~x.281*x.551)))
       z     = $g.278^(x.550*inv((~x.281*x.551)))
       z.1   = $g.278^(x.550*inv(x.551))
  */

rule (modulo E) client_gen_keys:
   [
   F_State_C2a( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g,
                p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id,
                p_edi, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
                p_auth_status, p_ems, p_rms, p_cert_req
   )[no_precomp],
   DHExp( p_x, ~tid, $C )
   ]
  --[
  C2a( ~tid ), Instance( ~tid, $C, 'client' ),
  RMS( ~tid, $C, 'client', Extract('0', Extract(p_gxy, p_es)) ),
  RHS( ~tid, $C, 'client', Extract(p_gxy, p_es) ),
  DeleteDH( ~tid, $C, p_x )
  ]->
   [
   F_State_C2b( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g,
                p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id,
                p_edi, p_es, Extract(p_gxy, p_es),
                Extract('0', Extract(p_gxy, p_es)), p_cats, p_sats,
                Expand(Expand(Extract(p_gxy, p_es), <'clienthts', h(p_messages)>,
                              '32'),
                       <'kshe_wk', '0'>, '32'),
                Expand(Expand(Extract(p_gxy, p_es), <'serverhts', h(p_messages)>,
                              '32'),
                       <'kshe_wk', '0'>, '32'),
                p_auth_status, p_ems, p_rms, p_cert_req
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) recv_encrypted_extensions:
   [
   F_State_C2b( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g,
                p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id,
                p_edi, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
                p_auth_status, p_ems, p_rms, p_cert_req
   )[no_precomp],
   In( senc(<'8', $exts>, p_hs_keys) )
   ]
  --[ C2b( ~tid ), Instance( ~tid, $C, 'client' ) ]->
   [
   F_State_C2c( ~tid, $C, $S, p_res_psk, <p_messages, '8', $exts>,
                p_nc, p_ns, p_g, p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy,
                p_psk_ke_mode, p_psk_id, p_edi, p_es, p_hs, p_ms, p_cats, p_sats,
                p_hs_keyc, p_hs_keys, p_auth_status, p_ems, p_rms, p_cert_req
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) recv_certificate_request:
   [
   F_State_C2c( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g,
                p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, 'na', p_psk_id, p_edi,
                p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
                p_auth_status, p_ems, p_rms, p_cert_req
   )[no_precomp],
   In( senc(<'13', '0', 'ce'>, p_hs_keys) )
   ]
  --[ C2c_req( ~tid ), Instance( ~tid, $C, 'client' ) ]->
   [
   F_State_C2d( ~tid, $C, $S, p_res_psk,
                <p_messages, '13', '0', 'ce'>, p_nc, p_ns, p_g, p_sg, p_hrr, p_x,
                p_y, p_gx, p_gy, p_gxy, 'na', p_psk_id, p_edi, p_es, p_hs, p_ms,
                p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems, p_rms,
                '1'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) skip_recv_certificate_request:
   [
   F_State_C2c( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g,
                p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id,
                p_edi, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
                p_auth_status, p_ems, p_rms, p_cert_req
   )[no_precomp]
   ]
  --[ C2c( ~tid ), Instance( ~tid, $C, 'client' ) ]->
   [
   F_State_C2d( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g,
                p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id,
                p_edi, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
                p_auth_status, p_ems, p_rms, '0'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) recv_server_auth:
   [
   F_State_C2d( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g,
                p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, 'na', p_psk_id, p_edi,
                p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
                p_auth_status, p_ems, p_rms, p_cert_req
   )[no_precomp],
   !Pk( $S, pk(~ltkS) ),
   In( senc(<<'11', '0', 'ce', pk(~ltkS)>, <'15', signature>, '20', 
             verify_data>,
            p_hs_keys)
   )
   ]
  --[
  C2d( ~tid ), Instance( ~tid, $C, 'client' ), Eq( 'na', 'na' ),
  Eq( verify(signature,
             <'server_cv', h(<p_messages, '11', '0', 'ce', pk(~ltkS)>)>,
             pk(~ltkS)),
      true
  ),
  Eq( verify_data,
      hmac(<
            Expand(Expand(p_hs,
                          <'serverhts', 
                           h(<<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', signature>)>,
                          '32'),
                   <'fin', '0'>, '32'), 
            h(<<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', signature>)>)
  ),
  RMode( ~tid, $C, 'client', 'na' ),
  CIdentity( ~tid, $C, 'client', <$S, '0', 'auth'> ),
  CHS( ~tid, $C, 'client', p_hs ),
  CTranscript( ~tid, $C, 'client',
               <<<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', signature>, 
                '20', verify_data>
  ),
  CNonces( ~tid, $C, 'client', <p_nc, p_ns> )
  ]->
   [
   F_State_C3( ~tid, $C, $S, p_res_psk,
               <<<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', signature>, 
                '20', verify_data>,
               p_nc, p_ns, p_g, p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, 'na',
               p_psk_id, p_edi, p_es, p_hs, p_ms,
               Expand(p_ms,
                      <'clientats', 
                       h(<<<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', signature>, 
                          '20', verify_data>)
                      >,
                      '32'),
               Expand(p_ms,
                      <'serverats', 
                       h(<<<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', signature>, 
                          '20', verify_data>)
                      >,
                      '32'),
               p_hs_keyc, p_hs_keys, <'0', 'auth'>,
               Expand(p_ms,
                      <'ems', 
                       h(<<<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', signature>, 
                          '20', verify_data>)
                      >,
                      '32'),
               p_rms, p_cert_req
   ),
   RecvStream( ~tid, $C, $S, <'0', 'auth'>,
               Expand(Expand(p_ms,
                             <'serverats', 
                              h(<<<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', signature>, 
                                 '20', verify_data>)
                             >,
                             '32'),
                      <'adke_wk', '0'>, '32')
   )
   ]

  /*
  rule (modulo AC) recv_server_auth:
     [
     F_State_C2d( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g,
                  p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, 'na', p_psk_id, p_edi,
                  p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
                  p_auth_status, p_ems, p_rms, p_cert_req
     )[no_precomp],
     !Pk( $S, pk(~ltkS) ),
     In( senc(<<'11', '0', 'ce', pk(~ltkS)>, <'15', signature>, '20', 
               verify_data>,
              p_hs_keys)
     )
     ]
    --[
    C2d( ~tid ), Instance( ~tid, $C, 'client' ), Eq( 'na', 'na' ),
    Eq( z, true ),
    Eq( verify_data,
        hmac(<
              Expand(Expand(p_hs,
                            <'serverhts', 
                             h(<<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', signature>)>,
                            '32'),
                     <'fin', '0'>, '32'), 
              h(<<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', signature>)>)
    ),
    RMode( ~tid, $C, 'client', 'na' ),
    CIdentity( ~tid, $C, 'client', <$S, '0', 'auth'> ),
    CHS( ~tid, $C, 'client', p_hs ),
    CTranscript( ~tid, $C, 'client',
                 <<<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', signature>, 
                  '20', verify_data>
    ),
    CNonces( ~tid, $C, 'client', <p_nc, p_ns> )
    ]->
     [
     F_State_C3( ~tid, $C, $S, p_res_psk,
                 <<<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', signature>, 
                  '20', verify_data>,
                 p_nc, p_ns, p_g, p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, 'na',
                 p_psk_id, p_edi, p_es, p_hs, p_ms,
                 Expand(p_ms,
                        <'clientats', 
                         h(<<<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', signature>, 
                            '20', verify_data>)
                        >,
                        '32'),
                 Expand(p_ms,
                        <'serverats', 
                         h(<<<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', signature>, 
                            '20', verify_data>)
                        >,
                        '32'),
                 p_hs_keyc, p_hs_keys, <'0', 'auth'>,
                 Expand(p_ms,
                        <'ems', 
                         h(<<<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', signature>, 
                            '20', verify_data>)
                        >,
                        '32'),
                 p_rms, p_cert_req
     ),
     RecvStream( ~tid, $C, $S, <'0', 'auth'>,
                 Expand(Expand(p_ms,
                               <'serverats', 
                                h(<<<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', signature>, 
                                   '20', verify_data>)
                               >,
                               '32'),
                        <'adke_wk', '0'>, '32')
     )
     ]
    variants (modulo AC)
    1. ~ltkS = ~ltkS.63
       p_messages
             = p_messages.79
       signature
             = sign(<'server_cv', 
                     h(<p_messages.79, '11', '0', 'ce', pk(~ltkS.63)>)>,
                    ~ltkS.63)
       z     = true
    
    2. ~ltkS = ~ltkS.74
       p_messages
             = p_messages.90
       signature
             = signature.101
       z     = verify(signature.101,
                      <'server_cv', h(<p_messages.90, '11', '0', 'ce', pk(~ltkS.74)>)>,
                      pk(~ltkS.74))
  */

rule (modulo E) client_auth:
   [
   F_State_C3( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g,
               p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id,
               p_edi, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
               p_auth_status, p_ems, p_rms, '0'
   )[no_precomp]
   ]
  --[
  C3( ~tid ), Instance( ~tid, $C, 'client' ),
  RTranscript( ~tid, $C, 'client',
               <p_messages, '20', 
                hmac(<
                      Expand(Expand(p_hs, <'clienthts', h(p_messages)>, '32'),
                             <'fin', '0'>, '32'), 
                      h(p_messages)>)
               >
  ),
  RHSMS( ~tid, $C, 'client', <p_hs, p_ms> ),
  RRMS( ~tid, $C, 'client',
        <$S, 
         Expand(p_ms,
                <'rms', 
                 h(<p_messages, '20', 
                    hmac(<
                          Expand(Expand(p_hs, <'clienthts', h(p_messages)>, '32'),
                                 <'fin', '0'>, '32'), 
                          h(p_messages)>)
                   >)
                >,
                '32'), 
         p_messages, '20', 
         hmac(<
               Expand(Expand(p_hs, <'clienthts', h(p_messages)>, '32'),
                      <'fin', '0'>, '32'), 
               h(p_messages)>)
        >
  ),
  RMode( ~tid, $C, 'client', p_psk_ke_mode ),
  SessionKey( ~tid, $C, $S, p_auth_status,
              <Expand(p_cats, <'adke_wk', '0'>, '32'), 
               Expand(p_sats, <'adke_wk', '0'>, '32')>
  )
  ]->
   [
   L_State_C4( ~tid, $C, $S, p_res_psk,
               <p_messages, '20', 
                hmac(<
                      Expand(Expand(p_hs, <'clienthts', h(p_messages)>, '32'),
                             <'fin', '0'>, '32'), 
                      h(p_messages)>)
               >,
               p_nc, p_ns, p_g, p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy,
               p_psk_ke_mode, p_psk_id, p_edi, p_es, p_hs, p_ms, p_cats, p_sats,
               p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
               Expand(p_ms,
                      <'rms', 
                       h(<p_messages, '20', 
                          hmac(<
                                Expand(Expand(p_hs, <'clienthts', h(p_messages)>, '32'),
                                       <'fin', '0'>, '32'), 
                                h(p_messages)>)
                         >)
                      >,
                      '32'),
               '0'
   ),
   Out( senc(<'20', 
              hmac(<
                    Expand(Expand(p_hs, <'clienthts', h(p_messages)>, '32'),
                           <'fin', '0'>, '32'), 
                    h(p_messages)>)
             >,
             p_hs_keyc)
   ),
   SendStream( ~tid, $C, $S, p_auth_status,
               Expand(p_cats, <'adke_wk', '0'>, '32')
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) client_auth_cert:
   [
   F_State_C3( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g,
               p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, 'na', p_psk_id, p_edi,
               p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
               p_auth_status, p_ems, p_rms, '1'
   )[no_precomp],
   RecvStream( ~tid, $C, $S, p_auth_status,
               Expand(p_sats, <'adke_wk', '0'>, '32')
   ),
   !Ltk( $C, ~ltkC )
   ]
  --[
  C3_cert( ~tid ), Instance( ~tid, $C, 'client' ),
  UseLtk( ~ltkC,
          sign(<'client_cv', h(<p_messages, '11', '0', 'ce', pk(~ltkC)>)>,
               ~ltkC)
  ),
  RHSMS( ~tid, $C, 'client', <p_hs, p_ms> ),
  RTranscript( ~tid, $C, 'client',
               <
                <<p_messages, '11', '0', 'ce', pk(~ltkC)>, '15', 
                 sign(<'client_cv', h(<p_messages, '11', '0', 'ce', pk(~ltkC)>)>,
                      ~ltkC)
                >, 
                '20', 
                hmac(<
                      Expand(Expand(p_hs,
                                    <'clienthts', 
                                     h(<<p_messages, '11', '0', 'ce', pk(~ltkC)>, '15', 
                                        sign(<'client_cv', 
                                              h(<p_messages, '11', '0', 'ce', pk(~ltkC)>)>,
                                             ~ltkC)
                                       >)
                                    >,
                                    '32'),
                             <'fin', '0'>, '32'), 
                      h(<<p_messages, '11', '0', 'ce', pk(~ltkC)>, '15', 
                         sign(<'client_cv', h(<p_messages, '11', '0', 'ce', pk(~ltkC)>)>,
                              ~ltkC)
                        >)
                     >)
               >
  ),
  RRMS( ~tid, $C, 'client',
        <$S, 
         Expand(p_ms,
                <'rms', 
                 h(<
                    <<p_messages, '11', '0', 'ce', pk(~ltkC)>, '15', 
                     sign(<'client_cv', h(<p_messages, '11', '0', 'ce', pk(~ltkC)>)>,
                          ~ltkC)
                    >, 
                    '20', 
                    hmac(<
                          Expand(Expand(p_hs,
                                        <'clienthts', 
                                         h(<<p_messages, '11', '0', 'ce', pk(~ltkC)>, '15', 
                                            sign(<'client_cv', 
                                                  h(<p_messages, '11', '0', 'ce', pk(~ltkC)>)>,
                                                 ~ltkC)
                                           >)
                                        >,
                                        '32'),
                                 <'fin', '0'>, '32'), 
                          h(<<p_messages, '11', '0', 'ce', pk(~ltkC)>, '15', 
                             sign(<'client_cv', h(<p_messages, '11', '0', 'ce', pk(~ltkC)>)>,
                                  ~ltkC)
                            >)
                         >)
                   >)
                >,
                '32'), 
         <<p_messages, '11', '0', 'ce', pk(~ltkC)>, '15', 
          sign(<'client_cv', h(<p_messages, '11', '0', 'ce', pk(~ltkC)>)>,
               ~ltkC)
         >, 
         '20', 
         hmac(<
               Expand(Expand(p_hs,
                             <'clienthts', 
                              h(<<p_messages, '11', '0', 'ce', pk(~ltkC)>, '15', 
                                 sign(<'client_cv', h(<p_messages, '11', '0', 'ce', pk(~ltkC)>)>,
                                      ~ltkC)
                                >)
                             >,
                             '32'),
                      <'fin', '0'>, '32'), 
               h(<<p_messages, '11', '0', 'ce', pk(~ltkC)>, '15', 
                  sign(<'client_cv', h(<p_messages, '11', '0', 'ce', pk(~ltkC)>)>,
                       ~ltkC)
                 >)
              >)
        >
  ),
  RMode( ~tid, $C, 'client', 'na' ),
  SessionKey( ~tid, $C, $S, <'auth', 'auth'>,
              <Expand(p_cats, <'adke_wk', '0'>, '32'), 
               Expand(p_sats, <'adke_wk', '0'>, '32')>
  )
  ]->
   [
   L_State_C4( ~tid, $C, $S, p_res_psk,
               <
                <<p_messages, '11', '0', 'ce', pk(~ltkC)>, '15', 
                 sign(<'client_cv', h(<p_messages, '11', '0', 'ce', pk(~ltkC)>)>,
                      ~ltkC)
                >, 
                '20', 
                hmac(<
                      Expand(Expand(p_hs,
                                    <'clienthts', 
                                     h(<<p_messages, '11', '0', 'ce', pk(~ltkC)>, '15', 
                                        sign(<'client_cv', 
                                              h(<p_messages, '11', '0', 'ce', pk(~ltkC)>)>,
                                             ~ltkC)
                                       >)
                                    >,
                                    '32'),
                             <'fin', '0'>, '32'), 
                      h(<<p_messages, '11', '0', 'ce', pk(~ltkC)>, '15', 
                         sign(<'client_cv', h(<p_messages, '11', '0', 'ce', pk(~ltkC)>)>,
                              ~ltkC)
                        >)
                     >)
               >,
               p_nc, p_ns, p_g, p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, 'na',
               p_psk_id, p_edi, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc,
               p_hs_keys, <'auth', 'auth'>, p_ems,
               Expand(p_ms,
                      <'rms', 
                       h(<
                          <<p_messages, '11', '0', 'ce', pk(~ltkC)>, '15', 
                           sign(<'client_cv', h(<p_messages, '11', '0', 'ce', pk(~ltkC)>)>,
                                ~ltkC)
                          >, 
                          '20', 
                          hmac(<
                                Expand(Expand(p_hs,
                                              <'clienthts', 
                                               h(<<p_messages, '11', '0', 'ce', pk(~ltkC)>, '15', 
                                                  sign(<'client_cv', 
                                                        h(<p_messages, '11', '0', 'ce', pk(~ltkC)>)
                                                       >,
                                                       ~ltkC)
                                                 >)
                                              >,
                                              '32'),
                                       <'fin', '0'>, '32'), 
                                h(<<p_messages, '11', '0', 'ce', pk(~ltkC)>, '15', 
                                   sign(<'client_cv', h(<p_messages, '11', '0', 'ce', pk(~ltkC)>)>,
                                        ~ltkC)
                                  >)
                               >)
                         >)
                      >,
                      '32'),
               '0'
   ),
   Out( senc(<<'11', '0', 'ce', pk(~ltkC)>, 
              <'15', 
               sign(<'client_cv', h(<p_messages, '11', '0', 'ce', pk(~ltkC)>)>,
                    ~ltkC)
              >, 
              '20', 
              hmac(<
                    Expand(Expand(p_hs,
                                  <'clienthts', 
                                   h(<<p_messages, '11', '0', 'ce', pk(~ltkC)>, '15', 
                                      sign(<'client_cv', h(<p_messages, '11', '0', 'ce', pk(~ltkC)>)
                                           >,
                                           ~ltkC)
                                     >)
                                  >,
                                  '32'),
                           <'fin', '0'>, '32'), 
                    h(<<p_messages, '11', '0', 'ce', pk(~ltkC)>, '15', 
                       sign(<'client_cv', h(<p_messages, '11', '0', 'ce', pk(~ltkC)>)>,
                            ~ltkC)
                      >)
                   >)
             >,
             p_hs_keyc)
   ),
   SendStream( ~tid, $C, $S, <'auth', 'auth'>,
               Expand(p_cats, <'adke_wk', '0'>, '32')
   ),
   RecvStream( ~tid, $C, $S, <'auth', 'auth'>,
               Expand(p_sats, <'adke_wk', '0'>, '32')
   )
   ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) start_server:
   [ Fr( ~tid ) ]
  --[
  Start( ~tid, $S, 'server' ), RIdentity( ~tid, $S, 'server', $S )
  ]->
   [
   F_State_S0( ~tid, $S, $C, '0', '0', '0', '0', '0', $g, '0', '0',
               '0', '0', '0', '0', 'na', '0', '0', '0', '0', '0', '0', '0', '0',
               '0', <'0', '0'>, '0', '0', '0'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) recv_client_hello:
   [
   In( <'1', '0x0303', new_nc, '0', $cipher_suites, '0', 
        <'43', '0x0304'>, <'10', $g1, $g2>, <'13', $sig_algs>, '40', 
        $new_g, $new_g^new_x>
   ),
   Fr( ~new_ns ),
   F_State_S0( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g,
               p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id,
               p_edi, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
               p_auth_status, p_ems, p_rms, p_cert_req
   )[no_precomp]
   ]
  --[ S0( ~tid ), Neq( $g1, $g2 ) ]->
   [
   F_State_S1( ~tid, $S, $C, p_res_psk,
               <p_messages, '1', '0x0303', new_nc, '0', $cipher_suites, '0', 
                <'43', '0x0304'>, <'10', $g1, $g2>, <'13', $sig_algs>, '40', 
                $new_g, $new_g^new_x>,
               new_nc, ~new_ns, $new_g, p_sg, p_hrr, p_x, p_y, $new_g^new_x, p_gy,
               p_gxy, 'na', p_psk_id, p_edi, p_es, p_hs, p_ms, p_cats, p_sats,
               p_hs_keyc, p_hs_keys, p_auth_status, p_ems, p_rms, p_cert_req
   )
   ]

  /*
  rule (modulo AC) recv_client_hello:
     [
     In( <'1', '0x0303', new_nc, '0', $cipher_suites, '0', 
          <'43', '0x0304'>, <'10', $g1, $g2>, <'13', $sig_algs>, '40', 
          $new_g, z>
     ),
     Fr( ~new_ns ),
     F_State_S0( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g,
                 p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id,
                 p_edi, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
                 p_auth_status, p_ems, p_rms, p_cert_req
     )[no_precomp]
     ]
    --[ S0( ~tid ), Neq( $g1, $g2 ) ]->
     [
     F_State_S1( ~tid, $S, $C, p_res_psk,
                 <p_messages, '1', '0x0303', new_nc, '0', $cipher_suites, '0', 
                  <'43', '0x0304'>, <'10', $g1, $g2>, <'13', $sig_algs>, '40', 
                  $new_g, z>,
                 new_nc, ~new_ns, $new_g, p_sg, p_hrr, p_x, p_y, z, p_gy, p_gxy,
                 'na', p_psk_id, p_edi, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc,
                 p_hs_keys, p_auth_status, p_ems, p_rms, p_cert_req
     )
     ]
    variants (modulo AC)
    1. $new_g
             = $new_g.48
       z     = $new_g.48
    
    2. $new_g
             = $new_g.384
       z     = $new_g.384^new_x.761
  */

rule (modulo E) hello_retry_request:
   [
   F_State_S1( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g,
               $p_sg, '0', p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id,
               p_edi, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
               p_auth_status, p_ems, p_rms, p_cert_req
   )[no_precomp]
   ]
  --[
  S1_retry( ~tid ), Neq( p_g, $p_sg ), Instance( ~tid, $S, 'server' )
  ]->
   [
   Out( <'6', '0x0303', '40', $p_sg> ),
   F_State_S0( ~tid, $S, $C, p_res_psk,
               <p_messages, '6', '0x0303', '40', $p_sg>, p_nc, p_ns, $p_sg, $p_sg,
               'hrr', p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi,
               p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
               p_auth_status, p_ems, p_rms, p_cert_req
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) server_hello:
   [
   F_State_S1( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, $p_g,
               p_sg, p_hrr, p_x, p_y, $p_g^some_x, p_gy, p_gxy, p_psk_ke_mode,
               p_psk_id, p_edi, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc,
               p_hs_keys, p_auth_status, p_ems, p_rms, p_cert_req
   ),
   Fr( ~y )
   ]
  --[
  S1( ~tid ), Eq( $p_g, p_sg ), Neq( $p_g^some_x, $p_g ),
  Neq( $p_g^some_x^~y, $p_g ), Instance( ~tid, $S, 'server' ),
  RNonces( ~tid, $S, 'server', <p_nc, p_ns> ),
  DHChal( $p_g, some_x, ~y, $p_g^some_x, $p_g^~y, $p_g^some_x^~y ),
  DH( ~tid, $S, ~y )
  ]->
   [
   F_State_S2a( ~tid, $S, $C, p_res_psk,
                <p_messages, '2', '0x0303', p_ns, $cipher_suite, 
                 <'13', $sig_algs>, '40', $p_g, $p_g^~y>,
                p_nc, p_ns, $p_g, p_sg, p_hrr, p_x, ~y, $p_g^some_x, $p_g^~y,
                $p_g^some_x^~y, 'na', p_psk_id, p_edi, Extract(p_res_psk, '0'),
                p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, <'0', '0'>,
                p_ems, p_rms, p_cert_req
   ),
   DHExp( ~y, ~tid, $S ),
   Out( <'2', '0x0303', p_ns, $cipher_suite, <'13', $sig_algs>, '40', 
         $p_g, $p_g^~y>
   )
   ]

  /*
  rule (modulo AC) server_hello:
     [
     F_State_S1( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, $p_g,
                 p_sg, p_hrr, p_x, p_y, z, p_gy, p_gxy, p_psk_ke_mode, p_psk_id,
                 p_edi, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
                 p_auth_status, p_ems, p_rms, p_cert_req
     ),
     Fr( ~y )
     ]
    --[
    S1( ~tid ), Eq( $p_g, p_sg ), Neq( z, $p_g ), Neq( z.1, $p_g ),
    Instance( ~tid, $S, 'server' ),
    RNonces( ~tid, $S, 'server', <p_nc, p_ns> ),
    DHChal( $p_g, some_x, ~y, z, $p_g^~y, z.1 ), DH( ~tid, $S, ~y )
    ]->
     [
     F_State_S2a( ~tid, $S, $C, p_res_psk,
                  <p_messages, '2', '0x0303', p_ns, $cipher_suite, 
                   <'13', $sig_algs>, '40', $p_g, $p_g^~y>,
                  p_nc, p_ns, $p_g, p_sg, p_hrr, p_x, ~y, z, $p_g^~y, z.1, 'na',
                  p_psk_id, p_edi, Extract(p_res_psk, '0'), p_hs, p_ms, p_cats,
                  p_sats, p_hs_keyc, p_hs_keys, <'0', '0'>, p_ems, p_rms, p_cert_req
     ),
     DHExp( ~y, ~tid, $S ),
     Out( <'2', '0x0303', p_ns, $cipher_suite, <'13', $sig_algs>, '40', 
           $p_g, $p_g^~y>
     )
     ]
    variants (modulo AC)
    1. $p_g  = $p_g.44
       ~y    = ~y.47
       some_x
             = inv(~y.47)
       z     = $p_g.44^inv(~y.47)
       z.1   = $p_g.44
    
    2. $p_g  = $p_g.44
       ~y    = ~y.47
       some_x
             = one
       z     = $p_g.44
       z.1   = $p_g.44^~y.47
    
    3. $p_g  = $p_g.69
       ~y    = ~y.72
       some_x
             = some_x.97
       z     = $p_g.69^some_x.97
       z.1   = $p_g.69^(~y.72*some_x.97)
    
    4. $p_g  = $p_g.515
       ~y    = ~y.518
       some_x
             = inv((~y.518*x.1025))
       z     = $p_g.515^inv((~y.518*x.1025))
       z.1   = $p_g.515^inv(x.1025)
    
    5. $p_g  = $p_g.515
       ~y    = ~y.518
       some_x
             = (x.1025*inv(~y.518))
       z     = $p_g.515^(x.1025*inv(~y.518))
       z.1   = $p_g.515^x.1025
    
    6. $p_g  = $p_g.516
       ~y    = ~y.519
       some_x
             = (x.1026*inv((~y.519*x.1027)))
       z     = $p_g.516^(x.1026*inv((~y.519*x.1027)))
       z.1   = $p_g.516^(x.1026*inv(x.1027))
  */

rule (modulo E) server_gen_keys:
   [
   F_State_S2a( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g,
                p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id,
                p_edi, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
                p_auth_status, p_ems, p_rms, p_cert_req
   )[no_precomp],
   DHExp( p_y, ~tid, $S )
   ]
  --[
  S2a( ~tid ), Extract( '0', Extract(p_gxy, p_es) ),
  Instance( ~tid, $S, 'server' ),
  RHS( ~tid, $S, 'server', Extract(p_gxy, p_es) ),
  RMS( ~tid, $S, 'server', Extract('0', Extract(p_gxy, p_es)) ),
  DeleteDH( ~tid, $S, p_y )
  ]->
   [
   F_State_S2b( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g,
                p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id,
                p_edi, p_es, Extract(p_gxy, p_es),
                Extract('0', Extract(p_gxy, p_es)), p_cats, p_sats,
                Expand(Expand(Extract(p_gxy, p_es), <'clienthts', h(p_messages)>,
                              '32'),
                       <'kshe_wk', '0'>, '32'),
                Expand(Expand(Extract(p_gxy, p_es), <'serverhts', h(p_messages)>,
                              '32'),
                       <'kshe_wk', '0'>, '32'),
                p_auth_status, p_ems, p_rms, p_cert_req
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) encrypted_extensions:
   [
   F_State_S2b( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g,
                p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id,
                p_edi, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
                p_auth_status, p_ems, p_rms, p_cert_req
   )[no_precomp]
   ]
  --[ S2b( ~tid ), Instance( ~tid, $S, 'server' ) ]->
   [
   F_State_S2c( ~tid, $S, $C, p_res_psk, <p_messages, '8', $exts>,
                p_nc, p_ns, p_g, p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy,
                p_psk_ke_mode, p_psk_id, p_edi, p_es, p_hs, p_ms, p_cats, p_sats,
                p_hs_keyc, p_hs_keys, p_auth_status, p_ems, p_rms, p_cert_req
   ),
   Out( senc(<'8', $exts>, p_hs_keys) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) certificate_request:
   [
   F_State_S2c( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g,
                p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, 'na', p_psk_id, p_edi,
                p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
                p_auth_status, p_ems, p_rms, p_cert_req
   )[no_precomp]
   ]
  --[
  S2c_req( ~tid ), Instance( ~tid, $S, 'server' ),
  RCertReqCtxt( ~tid, $S, 'server', '0' )
  ]->
   [
   F_State_S2d( ~tid, $S, $C, p_res_psk,
                <p_messages, '13', '0', 'ce'>, p_nc, p_ns, p_g, p_sg, p_hrr, p_x,
                p_y, p_gx, p_gy, p_gxy, 'na', p_psk_id, p_edi, p_es, p_hs, p_ms,
                p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems, p_rms,
                '1'
   ),
   Out( senc(<'13', '0', 'ce'>, p_hs_keys) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) skip_certificate_request:
   [
   F_State_S2c( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g,
                p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id,
                p_edi, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
                p_auth_status, p_ems, p_rms, p_cert_req
   )[no_precomp]
   ]
  --[ S2c( ~tid ), Instance( ~tid, $S, 'server' ) ]->
   [
   F_State_S2d( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g,
                p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id,
                p_edi, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
                p_auth_status, p_ems, p_rms, '0'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) server_auth:
   [
   F_State_S2d( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g,
                p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id,
                p_edi, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
                p_auth_status, p_ems, p_rms, p_cert_req
   )[no_precomp],
   !Ltk( $S, ~ltkS )
   ]
  --[
  S2d( ~tid ), Instance( ~tid, $S, 'server' ),
  Eq( p_psk_ke_mode, 'na' ),
  UseLtk( ~ltkS,
          sign(<'server_cv', h(<p_messages, '11', '0', 'ce', pk(~ltkS)>)>,
               ~ltkS)
  ),
  RNonces( ~tid, $S, 'server', <p_nc, p_ns> ),
  RTranscript( ~tid, $S, 'server',
               <
                <<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', 
                 sign(<'server_cv', h(<p_messages, '11', '0', 'ce', pk(~ltkS)>)>,
                      ~ltkS)
                >, 
                '20', 
                hmac(<
                      Expand(Expand(p_hs,
                                    <'serverhts', 
                                     h(<<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', 
                                        sign(<'server_cv', 
                                              h(<p_messages, '11', '0', 'ce', pk(~ltkS)>)>,
                                             ~ltkS)
                                       >)
                                    >,
                                    '32'),
                             <'fin', '0'>, '32'), 
                      h(<<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', 
                         sign(<'server_cv', h(<p_messages, '11', '0', 'ce', pk(~ltkS)>)>,
                              ~ltkS)
                        >)
                     >)
               >
  )
  ]->
   [
   F_State_S3( ~tid, $S, $C, p_res_psk,
               <
                <<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', 
                 sign(<'server_cv', h(<p_messages, '11', '0', 'ce', pk(~ltkS)>)>,
                      ~ltkS)
                >, 
                '20', 
                hmac(<
                      Expand(Expand(p_hs,
                                    <'serverhts', 
                                     h(<<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', 
                                        sign(<'server_cv', 
                                              h(<p_messages, '11', '0', 'ce', pk(~ltkS)>)>,
                                             ~ltkS)
                                       >)
                                    >,
                                    '32'),
                             <'fin', '0'>, '32'), 
                      h(<<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', 
                         sign(<'server_cv', h(<p_messages, '11', '0', 'ce', pk(~ltkS)>)>,
                              ~ltkS)
                        >)
                     >)
               >,
               p_nc, p_ns, p_g, p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy,
               p_psk_ke_mode, p_psk_id, p_edi, p_es, p_hs, p_ms,
               Expand(p_ms,
                      <'clientats', 
                       h(<
                          <<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', 
                           sign(<'server_cv', h(<p_messages, '11', '0', 'ce', pk(~ltkS)>)>,
                                ~ltkS)
                          >, 
                          '20', 
                          hmac(<
                                Expand(Expand(p_hs,
                                              <'serverhts', 
                                               h(<<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', 
                                                  sign(<'server_cv', 
                                                        h(<p_messages, '11', '0', 'ce', pk(~ltkS)>)
                                                       >,
                                                       ~ltkS)
                                                 >)
                                              >,
                                              '32'),
                                       <'fin', '0'>, '32'), 
                                h(<<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', 
                                   sign(<'server_cv', h(<p_messages, '11', '0', 'ce', pk(~ltkS)>)>,
                                        ~ltkS)
                                  >)
                               >)
                         >)
                      >,
                      '32'),
               Expand(p_ms,
                      <'serverats', 
                       h(<
                          <<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', 
                           sign(<'server_cv', h(<p_messages, '11', '0', 'ce', pk(~ltkS)>)>,
                                ~ltkS)
                          >, 
                          '20', 
                          hmac(<
                                Expand(Expand(p_hs,
                                              <'serverhts', 
                                               h(<<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', 
                                                  sign(<'server_cv', 
                                                        h(<p_messages, '11', '0', 'ce', pk(~ltkS)>)
                                                       >,
                                                       ~ltkS)
                                                 >)
                                              >,
                                              '32'),
                                       <'fin', '0'>, '32'), 
                                h(<<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', 
                                   sign(<'server_cv', h(<p_messages, '11', '0', 'ce', pk(~ltkS)>)>,
                                        ~ltkS)
                                  >)
                               >)
                         >)
                      >,
                      '32'),
               p_hs_keyc, p_hs_keys, <'auth', '0'>,
               Expand(p_ms,
                      <'ems', 
                       h(<
                          <<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', 
                           sign(<'server_cv', h(<p_messages, '11', '0', 'ce', pk(~ltkS)>)>,
                                ~ltkS)
                          >, 
                          '20', 
                          hmac(<
                                Expand(Expand(p_hs,
                                              <'serverhts', 
                                               h(<<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', 
                                                  sign(<'server_cv', 
                                                        h(<p_messages, '11', '0', 'ce', pk(~ltkS)>)
                                                       >,
                                                       ~ltkS)
                                                 >)
                                              >,
                                              '32'),
                                       <'fin', '0'>, '32'), 
                                h(<<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', 
                                   sign(<'server_cv', h(<p_messages, '11', '0', 'ce', pk(~ltkS)>)>,
                                        ~ltkS)
                                  >)
                               >)
                         >)
                      >,
                      '32'),
               p_rms, p_cert_req
   ),
   SendStream( ~tid, $S, $C, <'auth', '0'>,
               Expand(Expand(p_ms,
                             <'serverats', 
                              h(<
                                 <<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', 
                                  sign(<'server_cv', h(<p_messages, '11', '0', 'ce', pk(~ltkS)>)>,
                                       ~ltkS)
                                 >, 
                                 '20', 
                                 hmac(<
                                       Expand(Expand(p_hs,
                                                     <'serverhts', 
                                                      h(<<p_messages, '11', '0', 'ce', pk(~ltkS)>, 
                                                         '15', 
                                                         sign(<'server_cv', 
                                                               h(<p_messages, '11', '0', 'ce', 
                                                                  pk(~ltkS)>)
                                                              >,
                                                              ~ltkS)
                                                        >)
                                                     >,
                                                     '32'),
                                              <'fin', '0'>, '32'), 
                                       h(<<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', 
                                          sign(<'server_cv', 
                                                h(<p_messages, '11', '0', 'ce', pk(~ltkS)>)>,
                                               ~ltkS)
                                         >)
                                      >)
                                >)
                             >,
                             '32'),
                      <'adke_wk', '0'>, '32')
   ),
   Out( senc(<<'11', '0', 'ce', pk(~ltkS)>, 
              <'15', 
               sign(<'server_cv', h(<p_messages, '11', '0', 'ce', pk(~ltkS)>)>,
                    ~ltkS)
              >, 
              '20', 
              hmac(<
                    Expand(Expand(p_hs,
                                  <'serverhts', 
                                   h(<<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', 
                                      sign(<'server_cv', h(<p_messages, '11', '0', 'ce', pk(~ltkS)>)
                                           >,
                                           ~ltkS)
                                     >)
                                  >,
                                  '32'),
                           <'fin', '0'>, '32'), 
                    h(<<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', 
                       sign(<'server_cv', h(<p_messages, '11', '0', 'ce', pk(~ltkS)>)>,
                            ~ltkS)
                      >)
                   >)
             >,
             p_hs_keys)
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) recv_client_auth:
   [
   F_State_S3( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g,
               p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id,
               p_edi, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
               p_auth_status, p_ems, p_rms, '0'
   )[no_precomp],
   In( senc(<'20', verify_data>, p_hs_keyc) )
   ]
  --[
  S3( ~tid ), Instance( ~tid, $S, 'server' ),
  Eq( verify_data,
      hmac(<
            Expand(Expand(p_hs, <'clienthts', h(p_messages)>, '32'),
                   <'fin', '0'>, '32'), 
            h(p_messages)>)
  ),
  RMode( ~tid, $S, 'server', p_psk_ke_mode ),
  CIdentity( ~tid, $S, 'server', <$C, p_auth_status> ),
  CHS( ~tid, $S, 'server', p_hs ),
  RHSMS( ~tid, $S, 'server', <p_hs, p_ms> ),
  RRMS( ~tid, $S, 'server',
        <$C, 
         Expand(p_ms, <'rms', h(<p_messages, '20', verify_data>)>, '32'), 
         p_messages, '20', verify_data>
  ),
  CTranscript( ~tid, $S, 'server', <p_messages, '20', verify_data> ),
  CNonces( ~tid, $S, 'server', <p_nc, p_ns> ),
  SessionKey( ~tid, $S, $C, p_auth_status,
              <Expand(p_sats, <'adke_wk', '0'>, '32'), 
               Expand(p_cats, <'adke_wk', '0'>, '32')>
  )
  ]->
   [
   L_State_S4( ~tid, $S, $C, p_res_psk,
               <p_messages, '20', verify_data>, p_nc, p_ns, p_g, p_sg, p_hrr, p_x,
               p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es, p_hs,
               p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
               Expand(p_ms, <'rms', h(<p_messages, '20', verify_data>)>, '32'),
               '0'
   ),
   RecvStream( ~tid, $S, $C, p_auth_status,
               Expand(p_cats, <'adke_wk', '0'>, '32')
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) recv_client_auth_cert:
   [
   F_State_S3( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g,
               p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id,
               p_edi, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
               p_auth_status, p_ems, p_rms, '1'
   )[no_precomp],
   !Pk( $C, pk(~ltkC) ),
   SendStream( ~tid, $S, $C, p_auth_status,
               Expand(p_sats, <'adke_wk', '0'>, '32')
   ),
   In( senc(<<'11', '0', 'ce', pk(~ltkC)>, <'15', signature>, '20', 
             verify_data>,
            p_hs_keyc)
   )
   ]
  --[
  S3_cert( ~tid ), Instance( ~tid, $S, 'server' ),
  Eq( verify(signature,
             <'client_cv', h(<p_messages, '11', '0', 'ce', pk(~ltkC)>)>,
             pk(~ltkC)),
      true
  ),
  Eq( verify_data,
      hmac(<
            Expand(Expand(p_hs,
                          <'clienthts', 
                           h(<<p_messages, '11', '0', 'ce', pk(~ltkC)>, '15', signature>)>,
                          '32'),
                   <'fin', '0'>, '32'), 
            h(<<p_messages, '11', '0', 'ce', pk(~ltkC)>, '15', signature>)>)
  ),
  RMode( ~tid, $S, 'server', p_psk_ke_mode ),
  CIdentity( ~tid, $S, 'server', <$C, 'auth', 'auth'> ),
  CHS( ~tid, $S, 'server', p_hs ),
  RHSMS( ~tid, $S, 'server', <p_hs, p_ms> ),
  RRMS( ~tid, $S, 'server',
        <$C, 
         Expand(p_ms,
                <'rms', 
                 h(<<<p_messages, '11', '0', 'ce', pk(~ltkC)>, '15', signature>, 
                    '20', verify_data>)
                >,
                '32'), 
         <<p_messages, '11', '0', 'ce', pk(~ltkC)>, '15', signature>, '20', 
         verify_data>
  ),
  CTranscript( ~tid, $S, 'server',
               <<<p_messages, '11', '0', 'ce', pk(~ltkC)>, '15', signature>, 
                '20', verify_data>
  ),
  SessionKey( ~tid, $S, $C, <'auth', 'auth'>,
              <Expand(p_sats, <'adke_wk', '0'>, '32'), 
               Expand(p_cats, <'adke_wk', '0'>, '32')>
  ),
  CNonces( ~tid, $S, 'server', <p_nc, p_ns> )
  ]->
   [
   L_State_S4( ~tid, $S, $C, p_res_psk,
               <<<p_messages, '11', '0', 'ce', pk(~ltkC)>, '15', signature>, 
                '20', verify_data>,
               p_nc, p_ns, p_g, p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy,
               p_psk_ke_mode, p_psk_id, p_edi, p_es, p_hs, p_ms, p_cats, p_sats,
               p_hs_keyc, p_hs_keys, <'auth', 'auth'>, p_ems,
               Expand(p_ms,
                      <'rms', 
                       h(<<<p_messages, '11', '0', 'ce', pk(~ltkC)>, '15', signature>, 
                          '20', verify_data>)
                      >,
                      '32'),
               '0'
   ),
   SendStream( ~tid, $S, $C, <'auth', 'auth'>,
               Expand(p_sats, <'adke_wk', '0'>, '32')
   ),
   RecvStream( ~tid, $S, $C, <'auth', 'auth'>,
               Expand(p_cats, <'adke_wk', '0'>, '32')
   )
   ]

  // loop breaker: [2]
  /*
  rule (modulo AC) recv_client_auth_cert:
     [
     F_State_S3( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g,
                 p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id,
                 p_edi, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
                 p_auth_status, p_ems, p_rms, '1'
     )[no_precomp],
     !Pk( $C, pk(~ltkC) ),
     SendStream( ~tid, $S, $C, p_auth_status,
                 Expand(p_sats, <'adke_wk', '0'>, '32')
     ),
     In( senc(<<'11', '0', 'ce', pk(~ltkC)>, <'15', signature>, '20', 
               verify_data>,
              p_hs_keyc)
     )
     ]
    --[
    S3_cert( ~tid ), Instance( ~tid, $S, 'server' ), Eq( z, true ),
    Eq( verify_data,
        hmac(<
              Expand(Expand(p_hs,
                            <'clienthts', 
                             h(<<p_messages, '11', '0', 'ce', pk(~ltkC)>, '15', signature>)>,
                            '32'),
                     <'fin', '0'>, '32'), 
              h(<<p_messages, '11', '0', 'ce', pk(~ltkC)>, '15', signature>)>)
    ),
    RMode( ~tid, $S, 'server', p_psk_ke_mode ),
    CIdentity( ~tid, $S, 'server', <$C, 'auth', 'auth'> ),
    CHS( ~tid, $S, 'server', p_hs ),
    RHSMS( ~tid, $S, 'server', <p_hs, p_ms> ),
    RRMS( ~tid, $S, 'server',
          <$C, 
           Expand(p_ms,
                  <'rms', 
                   h(<<<p_messages, '11', '0', 'ce', pk(~ltkC)>, '15', signature>, 
                      '20', verify_data>)
                  >,
                  '32'), 
           <<p_messages, '11', '0', 'ce', pk(~ltkC)>, '15', signature>, '20', 
           verify_data>
    ),
    CTranscript( ~tid, $S, 'server',
                 <<<p_messages, '11', '0', 'ce', pk(~ltkC)>, '15', signature>, 
                  '20', verify_data>
    ),
    SessionKey( ~tid, $S, $C, <'auth', 'auth'>,
                <Expand(p_sats, <'adke_wk', '0'>, '32'), 
                 Expand(p_cats, <'adke_wk', '0'>, '32')>
    ),
    CNonces( ~tid, $S, 'server', <p_nc, p_ns> )
    ]->
     [
     L_State_S4( ~tid, $S, $C, p_res_psk,
                 <<<p_messages, '11', '0', 'ce', pk(~ltkC)>, '15', signature>, 
                  '20', verify_data>,
                 p_nc, p_ns, p_g, p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy,
                 p_psk_ke_mode, p_psk_id, p_edi, p_es, p_hs, p_ms, p_cats, p_sats,
                 p_hs_keyc, p_hs_keys, <'auth', 'auth'>, p_ems,
                 Expand(p_ms,
                        <'rms', 
                         h(<<<p_messages, '11', '0', 'ce', pk(~ltkC)>, '15', signature>, 
                            '20', verify_data>)
                        >,
                        '32'),
                 '0'
     ),
     SendStream( ~tid, $S, $C, <'auth', 'auth'>,
                 Expand(p_sats, <'adke_wk', '0'>, '32')
     ),
     RecvStream( ~tid, $S, $C, <'auth', 'auth'>,
                 Expand(p_cats, <'adke_wk', '0'>, '32')
     )
     ]
    variants (modulo AC)
    1. ~ltkC = ~ltkC.60
       p_messages
             = p_messages.75
       signature
             = sign(<'client_cv', 
                     h(<p_messages.75, '11', '0', 'ce', pk(~ltkC.60)>)>,
                    ~ltkC.60)
       z     = true
    
    2. ~ltkC = ~ltkC.72
       p_messages
             = p_messages.87
       signature
             = signature.99
       z     = verify(signature.99,
                      <'client_cv', h(<p_messages.87, '11', '0', 'ce', pk(~ltkC.72)>)>,
                      pk(~ltkC.72))
    // loop breaker: [2]
  */

rule (modulo E) recv_server_auth_DC:
   [
   F_State_C2d( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g,
                p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, 'na', p_psk_id, p_edi,
                p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
                p_auth_status, p_ems, p_rms, p_cert_req
   )[no_precomp],
   !Pk( $S, pk(~ltkS) ), !Pk( E, pk(~ltkE) ),
   In( senc(<
             <'11', '0', 
              <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
               cred_signature>, 
              pk(~ltkS)>, 
             <'15', signature>, '20', verify_data>,
            p_hs_keys)
   )
   ]
  --[
  C2d( ~tid ), Instance( ~tid, $C, 'client' ), Eq( 'na', 'na' ),
  Eq( verify(signature,
             <'server_cv', 
              h(<p_messages, '11', '0', 
                 <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                  cred_signature>, 
                 pk(~ltkS)>)
             >,
             pk(~ltkE)),
      true
  ),
  Eq( verify(cred_signature,
             <'TLSserverdelegatedcredentials', pk(~ltkS), 
              <'time', $sig_alg, pk(~ltkE)>, $sig_alg>,
             pk(~ltkS)),
      true
  ),
  Eq( verify_data,
      hmac(<
            Expand(Expand(p_hs,
                          <'serverhts', 
                           h(<
                              <p_messages, '11', '0', 
                               <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                                cred_signature>, 
                               pk(~ltkS)>, 
                              '15', signature>)
                          >,
                          '32'),
                   <'fin', '0'>, '32'), 
            h(<
               <p_messages, '11', '0', 
                <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                 cred_signature>, 
                pk(~ltkS)>, 
               '15', signature>)
           >)
  ),
  RMode( ~tid, $C, 'client', 'na' ),
  CIdentity( ~tid, $C, 'client', <$S, '0', 'auth'> ),
  CHS( ~tid, $C, 'client', p_hs ),
  CTranscript( ~tid, $C, 'client',
               <
                <
                 <p_messages, '11', '0', 
                  <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                   cred_signature>, 
                  pk(~ltkS)>, 
                 '15', signature>, 
                '20', verify_data>
  ),
  CNonces( ~tid, $C, 'client', <p_nc, p_ns> ),
  CDC( ~tid, $C, 'client', <$S, E> )
  ]->
   [
   F_State_C3( ~tid, $C, $S, p_res_psk,
               <
                <
                 <p_messages, '11', '0', 
                  <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                   cred_signature>, 
                  pk(~ltkS)>, 
                 '15', signature>, 
                '20', verify_data>,
               p_nc, p_ns, p_g, p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, 'na',
               p_psk_id, p_edi, p_es, p_hs, p_ms,
               Expand(p_ms,
                      <'clientats', 
                       h(<
                          <
                           <p_messages, '11', '0', 
                            <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                             cred_signature>, 
                            pk(~ltkS)>, 
                           '15', signature>, 
                          '20', verify_data>)
                      >,
                      '32'),
               Expand(p_ms,
                      <'serverats', 
                       h(<
                          <
                           <p_messages, '11', '0', 
                            <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                             cred_signature>, 
                            pk(~ltkS)>, 
                           '15', signature>, 
                          '20', verify_data>)
                      >,
                      '32'),
               p_hs_keyc, p_hs_keys, <'0', 'auth'>,
               Expand(p_ms,
                      <'ems', 
                       h(<
                          <
                           <p_messages, '11', '0', 
                            <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                             cred_signature>, 
                            pk(~ltkS)>, 
                           '15', signature>, 
                          '20', verify_data>)
                      >,
                      '32'),
               p_rms, p_cert_req
   ),
   RecvStream( ~tid, $C, $S, <'0', 'auth'>,
               Expand(Expand(p_ms,
                             <'serverats', 
                              h(<
                                 <
                                  <p_messages, '11', '0', 
                                   <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                                    cred_signature>, 
                                   pk(~ltkS)>, 
                                  '15', signature>, 
                                 '20', verify_data>)
                             >,
                             '32'),
                      <'adke_wk', '0'>, '32')
   )
   ]

  /*
  rule (modulo AC) recv_server_auth_DC:
     [
     F_State_C2d( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g,
                  p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, 'na', p_psk_id, p_edi,
                  p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
                  p_auth_status, p_ems, p_rms, p_cert_req
     )[no_precomp],
     !Pk( $S, pk(~ltkS) ), !Pk( E, pk(~ltkE) ),
     In( senc(<
               <'11', '0', 
                <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                 cred_signature>, 
                pk(~ltkS)>, 
               <'15', signature>, '20', verify_data>,
              p_hs_keys)
     )
     ]
    --[
    C2d( ~tid ), Instance( ~tid, $C, 'client' ), Eq( 'na', 'na' ),
    Eq( z, true ), Eq( z.1, true ),
    Eq( verify_data,
        hmac(<
              Expand(Expand(p_hs,
                            <'serverhts', 
                             h(<
                                <p_messages, '11', '0', 
                                 <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                                  cred_signature>, 
                                 pk(~ltkS)>, 
                                '15', signature>)
                            >,
                            '32'),
                     <'fin', '0'>, '32'), 
              h(<
                 <p_messages, '11', '0', 
                  <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                   cred_signature>, 
                  pk(~ltkS)>, 
                 '15', signature>)
             >)
    ),
    RMode( ~tid, $C, 'client', 'na' ),
    CIdentity( ~tid, $C, 'client', <$S, '0', 'auth'> ),
    CHS( ~tid, $C, 'client', p_hs ),
    CTranscript( ~tid, $C, 'client',
                 <
                  <
                   <p_messages, '11', '0', 
                    <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                     cred_signature>, 
                    pk(~ltkS)>, 
                   '15', signature>, 
                  '20', verify_data>
    ),
    CNonces( ~tid, $C, 'client', <p_nc, p_ns> ),
    CDC( ~tid, $C, 'client', <$S, E> )
    ]->
     [
     F_State_C3( ~tid, $C, $S, p_res_psk,
                 <
                  <
                   <p_messages, '11', '0', 
                    <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                     cred_signature>, 
                    pk(~ltkS)>, 
                   '15', signature>, 
                  '20', verify_data>,
                 p_nc, p_ns, p_g, p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, 'na',
                 p_psk_id, p_edi, p_es, p_hs, p_ms,
                 Expand(p_ms,
                        <'clientats', 
                         h(<
                            <
                             <p_messages, '11', '0', 
                              <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                               cred_signature>, 
                              pk(~ltkS)>, 
                             '15', signature>, 
                            '20', verify_data>)
                        >,
                        '32'),
                 Expand(p_ms,
                        <'serverats', 
                         h(<
                            <
                             <p_messages, '11', '0', 
                              <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                               cred_signature>, 
                              pk(~ltkS)>, 
                             '15', signature>, 
                            '20', verify_data>)
                        >,
                        '32'),
                 p_hs_keyc, p_hs_keys, <'0', 'auth'>,
                 Expand(p_ms,
                        <'ems', 
                         h(<
                            <
                             <p_messages, '11', '0', 
                              <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                               cred_signature>, 
                              pk(~ltkS)>, 
                             '15', signature>, 
                            '20', verify_data>)
                        >,
                        '32'),
                 p_rms, p_cert_req
     ),
     RecvStream( ~tid, $C, $S, <'0', 'auth'>,
                 Expand(Expand(p_ms,
                               <'serverats', 
                                h(<
                                   <
                                    <p_messages, '11', '0', 
                                     <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                                      cred_signature>, 
                                     pk(~ltkS)>, 
                                    '15', signature>, 
                                   '20', verify_data>)
                               >,
                               '32'),
                        <'adke_wk', '0'>, '32')
     )
     ]
    variants (modulo AC)
    1. $sig_alg
             = $sig_alg.74
       ~ltkE = ~ltkE.75
       ~ltkS = ~ltkS.76
       cred_signature
             = cred_signature.79
       p_messages
             = p_messages.94
       signature
             = sign(<'server_cv', 
                     h(<p_messages.94, '11', '0', 
                        <'ce', 'TBD', <'time', $sig_alg.74, pk(~ltkE.75)>, $sig_alg.74, 
                         cred_signature.79>, 
                        pk(~ltkS.76)>)
                    >,
                    ~ltkE.75)
       z     = true
       z.1   = verify(cred_signature.79,
                      <'TLSserverdelegatedcredentials', pk(~ltkS.76), 
                       <'time', $sig_alg.74, pk(~ltkE.75)>, $sig_alg.74>,
                      pk(~ltkS.76))
    
    2. $sig_alg
             = $sig_alg.74
       ~ltkE = ~ltkE.75
       ~ltkS = ~ltkS.76
       cred_signature
             = sign(<'TLSserverdelegatedcredentials', pk(~ltkS.76), 
                     <'time', $sig_alg.74, pk(~ltkE.75)>, $sig_alg.74>,
                    ~ltkS.76)
       p_messages
             = p_messages.94
       signature
             = sign(<'server_cv', 
                     h(<p_messages.94, '11', '0', 
                        <'ce', 'TBD', <'time', $sig_alg.74, pk(~ltkE.75)>, $sig_alg.74, 
                         sign(<'TLSserverdelegatedcredentials', pk(~ltkS.76), 
                               <'time', $sig_alg.74, pk(~ltkE.75)>, $sig_alg.74>,
                              ~ltkS.76)
                        >, 
                        pk(~ltkS.76)>)
                    >,
                    ~ltkE.75)
       z     = true
       z.1   = true
    
    3. $sig_alg
             = $sig_alg.85
       ~ltkE = ~ltkE.86
       ~ltkS = ~ltkS.87
       cred_signature
             = cred_signature.90
       p_messages
             = p_messages.105
       signature
             = signature.116
       z     = verify(signature.116,
                      <'server_cv', 
                       h(<p_messages.105, '11', '0', 
                          <'ce', 'TBD', <'time', $sig_alg.85, pk(~ltkE.86)>, $sig_alg.85, 
                           cred_signature.90>, 
                          pk(~ltkS.87)>)
                      >,
                      pk(~ltkE.86))
       z.1   = verify(cred_signature.90,
                      <'TLSserverdelegatedcredentials', pk(~ltkS.87), 
                       <'time', $sig_alg.85, pk(~ltkE.86)>, $sig_alg.85>,
                      pk(~ltkS.87))
    
    4. $sig_alg
             = $sig_alg.85
       ~ltkE = ~ltkE.86
       ~ltkS = ~ltkS.87
       cred_signature
             = sign(<'TLSserverdelegatedcredentials', pk(~ltkS.87), 
                     <'time', $sig_alg.85, pk(~ltkE.86)>, $sig_alg.85>,
                    ~ltkS.87)
       p_messages
             = p_messages.105
       signature
             = signature.116
       z     = verify(signature.116,
                      <'server_cv', 
                       h(<p_messages.105, '11', '0', 
                          <'ce', 'TBD', <'time', $sig_alg.85, pk(~ltkE.86)>, $sig_alg.85, 
                           sign(<'TLSserverdelegatedcredentials', pk(~ltkS.87), 
                                 <'time', $sig_alg.85, pk(~ltkE.86)>, $sig_alg.85>,
                                ~ltkS.87)
                          >, 
                          pk(~ltkS.87)>)
                      >,
                      pk(~ltkE.86))
       z.1   = true
  */

rule (modulo E) server_auth_DC:
   [
   F_State_S2d( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g,
                p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id,
                p_edi, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
                p_auth_status, p_ems, p_rms, p_cert_req
   )[no_precomp],
   !Ltk( $E, ~ltkE ), !Pk( $S, pk(~ltkS) ),
   !DC( $E, $S,
        <'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, cred_signature>
   )
   ]
  --[
  S2d( ~tid ), Instance( ~tid, $S, 'server' ),
  Eq( p_psk_ke_mode, 'na' ),
  UseLtk( ~ltkE,
          sign(<'server_cv', 
                h(<p_messages, '11', '0', 
                   <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                    cred_signature>, 
                   pk(~ltkS)>)
               >,
               ~ltkE)
  ),
  RTranscript( ~tid, $S, 'server',
               <
                <
                 <p_messages, '11', '0', 
                  <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                   cred_signature>, 
                  pk(~ltkS)>, 
                 '15', 
                 sign(<'server_cv', 
                       h(<p_messages, '11', '0', 
                          <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                           cred_signature>, 
                          pk(~ltkS)>)
                      >,
                      ~ltkE)
                >, 
                '20', 
                hmac(<
                      Expand(Expand(p_hs,
                                    <'serverhts', 
                                     h(<
                                        <p_messages, '11', '0', 
                                         <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                                          cred_signature>, 
                                         pk(~ltkS)>, 
                                        '15', 
                                        sign(<'server_cv', 
                                              h(<p_messages, '11', '0', 
                                                 <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, 
                                                  $sig_alg, cred_signature>, 
                                                 pk(~ltkS)>)
                                             >,
                                             ~ltkE)
                                       >)
                                    >,
                                    '32'),
                             <'fin', '0'>, '32'), 
                      h(<
                         <p_messages, '11', '0', 
                          <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                           cred_signature>, 
                          pk(~ltkS)>, 
                         '15', 
                         sign(<'server_cv', 
                               h(<p_messages, '11', '0', 
                                  <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                                   cred_signature>, 
                                  pk(~ltkS)>)
                              >,
                              ~ltkE)
                        >)
                     >)
               >
  )
  ]->
   [
   F_State_S3( ~tid, $S, $C, p_res_psk,
               <
                <
                 <p_messages, '11', '0', 
                  <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                   cred_signature>, 
                  pk(~ltkS)>, 
                 '15', 
                 sign(<'server_cv', 
                       h(<p_messages, '11', '0', 
                          <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                           cred_signature>, 
                          pk(~ltkS)>)
                      >,
                      ~ltkE)
                >, 
                '20', 
                hmac(<
                      Expand(Expand(p_hs,
                                    <'serverhts', 
                                     h(<
                                        <p_messages, '11', '0', 
                                         <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                                          cred_signature>, 
                                         pk(~ltkS)>, 
                                        '15', 
                                        sign(<'server_cv', 
                                              h(<p_messages, '11', '0', 
                                                 <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, 
                                                  $sig_alg, cred_signature>, 
                                                 pk(~ltkS)>)
                                             >,
                                             ~ltkE)
                                       >)
                                    >,
                                    '32'),
                             <'fin', '0'>, '32'), 
                      h(<
                         <p_messages, '11', '0', 
                          <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                           cred_signature>, 
                          pk(~ltkS)>, 
                         '15', 
                         sign(<'server_cv', 
                               h(<p_messages, '11', '0', 
                                  <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                                   cred_signature>, 
                                  pk(~ltkS)>)
                              >,
                              ~ltkE)
                        >)
                     >)
               >,
               p_nc, p_ns, p_g, p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy,
               p_psk_ke_mode, p_psk_id, p_edi, p_es, p_hs, p_ms,
               Expand(p_ms,
                      <'clientats', 
                       h(<
                          <
                           <p_messages, '11', '0', 
                            <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                             cred_signature>, 
                            pk(~ltkS)>, 
                           '15', 
                           sign(<'server_cv', 
                                 h(<p_messages, '11', '0', 
                                    <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                                     cred_signature>, 
                                    pk(~ltkS)>)
                                >,
                                ~ltkE)
                          >, 
                          '20', 
                          hmac(<
                                Expand(Expand(p_hs,
                                              <'serverhts', 
                                               h(<
                                                  <p_messages, '11', '0', 
                                                   <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, 
                                                    $sig_alg, cred_signature>, 
                                                   pk(~ltkS)>, 
                                                  '15', 
                                                  sign(<'server_cv', 
                                                        h(<p_messages, '11', '0', 
                                                           <'ce', 'TBD', 
                                                            <'time', $sig_alg, pk(~ltkE)>, 
                                                            $sig_alg, cred_signature>, 
                                                           pk(~ltkS)>)
                                                       >,
                                                       ~ltkE)
                                                 >)
                                              >,
                                              '32'),
                                       <'fin', '0'>, '32'), 
                                h(<
                                   <p_messages, '11', '0', 
                                    <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                                     cred_signature>, 
                                    pk(~ltkS)>, 
                                   '15', 
                                   sign(<'server_cv', 
                                         h(<p_messages, '11', '0', 
                                            <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                                             cred_signature>, 
                                            pk(~ltkS)>)
                                        >,
                                        ~ltkE)
                                  >)
                               >)
                         >)
                      >,
                      '32'),
               Expand(p_ms,
                      <'serverats', 
                       h(<
                          <
                           <p_messages, '11', '0', 
                            <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                             cred_signature>, 
                            pk(~ltkS)>, 
                           '15', 
                           sign(<'server_cv', 
                                 h(<p_messages, '11', '0', 
                                    <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                                     cred_signature>, 
                                    pk(~ltkS)>)
                                >,
                                ~ltkE)
                          >, 
                          '20', 
                          hmac(<
                                Expand(Expand(p_hs,
                                              <'serverhts', 
                                               h(<
                                                  <p_messages, '11', '0', 
                                                   <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, 
                                                    $sig_alg, cred_signature>, 
                                                   pk(~ltkS)>, 
                                                  '15', 
                                                  sign(<'server_cv', 
                                                        h(<p_messages, '11', '0', 
                                                           <'ce', 'TBD', 
                                                            <'time', $sig_alg, pk(~ltkE)>, 
                                                            $sig_alg, cred_signature>, 
                                                           pk(~ltkS)>)
                                                       >,
                                                       ~ltkE)
                                                 >)
                                              >,
                                              '32'),
                                       <'fin', '0'>, '32'), 
                                h(<
                                   <p_messages, '11', '0', 
                                    <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                                     cred_signature>, 
                                    pk(~ltkS)>, 
                                   '15', 
                                   sign(<'server_cv', 
                                         h(<p_messages, '11', '0', 
                                            <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                                             cred_signature>, 
                                            pk(~ltkS)>)
                                        >,
                                        ~ltkE)
                                  >)
                               >)
                         >)
                      >,
                      '32'),
               p_hs_keyc, p_hs_keys, <'auth', '0'>,
               Expand(p_ms,
                      <'ems', 
                       h(<
                          <
                           <p_messages, '11', '0', 
                            <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                             cred_signature>, 
                            pk(~ltkS)>, 
                           '15', 
                           sign(<'server_cv', 
                                 h(<p_messages, '11', '0', 
                                    <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                                     cred_signature>, 
                                    pk(~ltkS)>)
                                >,
                                ~ltkE)
                          >, 
                          '20', 
                          hmac(<
                                Expand(Expand(p_hs,
                                              <'serverhts', 
                                               h(<
                                                  <p_messages, '11', '0', 
                                                   <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, 
                                                    $sig_alg, cred_signature>, 
                                                   pk(~ltkS)>, 
                                                  '15', 
                                                  sign(<'server_cv', 
                                                        h(<p_messages, '11', '0', 
                                                           <'ce', 'TBD', 
                                                            <'time', $sig_alg, pk(~ltkE)>, 
                                                            $sig_alg, cred_signature>, 
                                                           pk(~ltkS)>)
                                                       >,
                                                       ~ltkE)
                                                 >)
                                              >,
                                              '32'),
                                       <'fin', '0'>, '32'), 
                                h(<
                                   <p_messages, '11', '0', 
                                    <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                                     cred_signature>, 
                                    pk(~ltkS)>, 
                                   '15', 
                                   sign(<'server_cv', 
                                         h(<p_messages, '11', '0', 
                                            <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                                             cred_signature>, 
                                            pk(~ltkS)>)
                                        >,
                                        ~ltkE)
                                  >)
                               >)
                         >)
                      >,
                      '32'),
               p_rms, p_cert_req
   ),
   SendStream( ~tid, $S, $C, <'auth', '0'>,
               Expand(Expand(p_ms,
                             <'serverats', 
                              h(<
                                 <
                                  <p_messages, '11', '0', 
                                   <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                                    cred_signature>, 
                                   pk(~ltkS)>, 
                                  '15', 
                                  sign(<'server_cv', 
                                        h(<p_messages, '11', '0', 
                                           <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                                            cred_signature>, 
                                           pk(~ltkS)>)
                                       >,
                                       ~ltkE)
                                 >, 
                                 '20', 
                                 hmac(<
                                       Expand(Expand(p_hs,
                                                     <'serverhts', 
                                                      h(<
                                                         <p_messages, '11', '0', 
                                                          <'ce', 'TBD', 
                                                           <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                                                           cred_signature>, 
                                                          pk(~ltkS)>, 
                                                         '15', 
                                                         sign(<'server_cv', 
                                                               h(<p_messages, '11', '0', 
                                                                  <'ce', 'TBD', 
                                                                   <'time', $sig_alg, pk(~ltkE)>, 
                                                                   $sig_alg, cred_signature>, 
                                                                  pk(~ltkS)>)
                                                              >,
                                                              ~ltkE)
                                                        >)
                                                     >,
                                                     '32'),
                                              <'fin', '0'>, '32'), 
                                       h(<
                                          <p_messages, '11', '0', 
                                           <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                                            cred_signature>, 
                                           pk(~ltkS)>, 
                                          '15', 
                                          sign(<'server_cv', 
                                                h(<p_messages, '11', '0', 
                                                   <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, 
                                                    $sig_alg, cred_signature>, 
                                                   pk(~ltkS)>)
                                               >,
                                               ~ltkE)
                                         >)
                                      >)
                                >)
                             >,
                             '32'),
                      <'adke_wk', '0'>, '32')
   ),
   Out( senc(<
              <'11', '0', 
               <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                cred_signature>, 
               pk(~ltkS)>, 
              <'15', 
               sign(<'server_cv', 
                     h(<p_messages, '11', '0', 
                        <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                         cred_signature>, 
                        pk(~ltkS)>)
                    >,
                    ~ltkE)
              >, 
              '20', 
              hmac(<
                    Expand(Expand(p_hs,
                                  <'serverhts', 
                                   h(<
                                      <p_messages, '11', '0', 
                                       <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                                        cred_signature>, 
                                       pk(~ltkS)>, 
                                      '15', 
                                      sign(<'server_cv', 
                                            h(<p_messages, '11', '0', 
                                               <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, 
                                                $sig_alg, cred_signature>, 
                                               pk(~ltkS)>)
                                           >,
                                           ~ltkE)
                                     >)
                                  >,
                                  '32'),
                           <'fin', '0'>, '32'), 
                    h(<
                       <p_messages, '11', '0', 
                        <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                         cred_signature>, 
                        pk(~ltkS)>, 
                       '15', 
                       sign(<'server_cv', 
                             h(<p_messages, '11', '0', 
                                <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                                 cred_signature>, 
                                pk(~ltkS)>)
                            >,
                            ~ltkE)
                      >)
                   >)
             >,
             p_hs_keys)
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) send:
   [
   SendStream( ~tid, $actor, $peer, auth_status, app_key_out ),
   Fr( ~data )
   ]
  --[
  Send( ~tid ), SendData( ~tid, $actor, $peer, auth_status, ~data )
  ]->
   [
   SendStream( ~tid, $actor, $peer, auth_status, app_key_out ),
   Out( senc(<~data, '23'>, app_key_out) )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) recv:
   [
   RecvStream( ~tid, $actor, $peer, auth_status, app_key_in ),
   In( senc(<data, '23'>, app_key_in) )
   ]
  --[
  Recv( ~tid ), RecvData( ~tid, $actor, $peer, auth_status, data )
  ]->
   [ RecvStream( ~tid, $actor, $peer, auth_status, app_key_in ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

lemma one_C0_per_tid [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j. ((C0( tid ) @ #i) ∧ (C0( tid ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j. (C0( tid ) @ #i) ∧ (C0( tid ) @ #j) ∧ ¬(#i = #j)"
*/
by sorry

lemma one_C1_per_tid [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j. ((C1( tid ) @ #i) ∧ (C1( tid ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j. (C1( tid ) @ #i) ∧ (C1( tid ) @ #j) ∧ ¬(#i = #j)"
*/
by sorry

lemma one_C1_retry_per_tid [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j.
    ((C1_retry( tid ) @ #i) ∧ (C1_retry( tid ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j.
  (C1_retry( tid ) @ #i) ∧ (C1_retry( tid ) @ #j) ∧ ¬(#i = #j)"
*/
by sorry

lemma one_S1_per_tid [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j. ((S1( tid ) @ #i) ∧ (S1( tid ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j. (S1( tid ) @ #i) ∧ (S1( tid ) @ #j) ∧ ¬(#i = #j)"
*/
by sorry

lemma one_S1_PSK_per_tid [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j.
    ((S1_PSK( tid ) @ #i) ∧ (S1_PSK( tid ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j.
  (S1_PSK( tid ) @ #i) ∧ (S1_PSK( tid ) @ #j) ∧ ¬(#i = #j)"
*/
by sorry

lemma one_S1_PSK_DHE_per_tid [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j.
    ((S1_PSK_DHE( tid ) @ #i) ∧ (S1_PSK_DHE( tid ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j.
  (S1_PSK_DHE( tid ) @ #i) ∧ (S1_PSK_DHE( tid ) @ #j) ∧ ¬(#i = #j)"
*/
by sorry

lemma one_C1_PSK_per_tid [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j.
    ((C1_PSK( tid ) @ #i) ∧ (C1_PSK( tid ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j.
  (C1_PSK( tid ) @ #i) ∧ (C1_PSK( tid ) @ #j) ∧ ¬(#i = #j)"
*/
by sorry

lemma one_C1_PSK_DHE_per_tid [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j.
    ((C1_PSK_DHE( tid ) @ #i) ∧ (C1_PSK_DHE( tid ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j.
  (C1_PSK_DHE( tid ) @ #i) ∧ (C1_PSK_DHE( tid ) @ #j) ∧ ¬(#i = #j)"
*/
by sorry

lemma one_S2a_per_tid [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j. ((S2a( tid ) @ #i) ∧ (S2a( tid ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j. (S2a( tid ) @ #i) ∧ (S2a( tid ) @ #j) ∧ ¬(#i = #j)"
*/
by sorry

lemma one_S2b_per_tid [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j. ((S2b( tid ) @ #i) ∧ (S2b( tid ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j. (S2b( tid ) @ #i) ∧ (S2b( tid ) @ #j) ∧ ¬(#i = #j)"
*/
by sorry

lemma one_S2c_per_tid [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j. ((S2c( tid ) @ #i) ∧ (S2c( tid ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j. (S2c( tid ) @ #i) ∧ (S2c( tid ) @ #j) ∧ ¬(#i = #j)"
*/
by sorry

lemma one_S2c_req_per_tid [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j.
    ((S2c_req( tid ) @ #i) ∧ (S2c_req( tid ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j.
  (S2c_req( tid ) @ #i) ∧ (S2c_req( tid ) @ #j) ∧ ¬(#i = #j)"
*/
by sorry

lemma one_S2d_per_tid [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j. ((S2d( tid ) @ #i) ∧ (S2d( tid ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j. (S2d( tid ) @ #i) ∧ (S2d( tid ) @ #j) ∧ ¬(#i = #j)"
*/
by sorry

lemma one_S2d_PSK_per_tid [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j.
    ((S2d_PSK( tid ) @ #i) ∧ (S2d_PSK( tid ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j.
  (S2d_PSK( tid ) @ #i) ∧ (S2d_PSK( tid ) @ #j) ∧ ¬(#i = #j)"
*/
by sorry

lemma one_C2a_per_tid [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j. ((C2a( tid ) @ #i) ∧ (C2a( tid ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j. (C2a( tid ) @ #i) ∧ (C2a( tid ) @ #j) ∧ ¬(#i = #j)"
*/
by sorry

lemma one_C2b_per_tid [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j. ((C2b( tid ) @ #i) ∧ (C2b( tid ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j. (C2b( tid ) @ #i) ∧ (C2b( tid ) @ #j) ∧ ¬(#i = #j)"
*/
by sorry

lemma one_C2c_per_tid [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j. ((C2c( tid ) @ #i) ∧ (C2c( tid ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j. (C2c( tid ) @ #i) ∧ (C2c( tid ) @ #j) ∧ ¬(#i = #j)"
*/
by sorry

lemma one_C2c_req_per_tid [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j.
    ((C2c_req( tid ) @ #i) ∧ (C2c_req( tid ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j.
  (C2c_req( tid ) @ #i) ∧ (C2c_req( tid ) @ #j) ∧ ¬(#i = #j)"
*/
by sorry

lemma one_C2d_per_tid [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j. ((C2d( tid ) @ #i) ∧ (C2d( tid ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j. (C2d( tid ) @ #i) ∧ (C2d( tid ) @ #j) ∧ ¬(#i = #j)"
*/
by sorry

lemma one_C2d_PSK_per_tid [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j.
    ((C2d_PSK( tid ) @ #i) ∧ (C2d_PSK( tid ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j.
  (C2d_PSK( tid ) @ #i) ∧ (C2d_PSK( tid ) @ #j) ∧ ¬(#i = #j)"
*/
by sorry

lemma one_C3_per_tid [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j. ((C3( tid ) @ #i) ∧ (C3( tid ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j. (C3( tid ) @ #i) ∧ (C3( tid ) @ #j) ∧ ¬(#i = #j)"
*/
by sorry

lemma one_C3_cert_per_tid [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j.
    ((C3_cert( tid ) @ #i) ∧ (C3_cert( tid ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j.
  (C3_cert( tid ) @ #i) ∧ (C3_cert( tid ) @ #j) ∧ ¬(#i = #j)"
*/
by sorry

lemma one_S3_per_tid [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j. ((S3( tid ) @ #i) ∧ (S3( tid ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j. (S3( tid ) @ #i) ∧ (S3( tid ) @ #j) ∧ ¬(#i = #j)"
*/
by sorry

lemma one_S3_cert_per_tid [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j.
    ((S3_cert( tid ) @ #i) ∧ (S3_cert( tid ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j.
  (S3_cert( tid ) @ #i) ∧ (S3_cert( tid ) @ #j) ∧ ¬(#i = #j)"
*/
by sorry

lemma S1_vs_S1_PSK_DHE [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j. ((S1( tid ) @ #i) ∧ (S1_PSK_DHE( tid ) @ #j)) ⇒ (⊥)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j. (S1( tid ) @ #i) ∧ (S1_PSK_DHE( tid ) @ #j)"
*/
by sorry

lemma S1_PSK_vs_S1_PSK_DHE [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j.
    ((S1_PSK( tid ) @ #i) ∧ (S1_PSK_DHE( tid ) @ #j)) ⇒ (⊥)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j. (S1_PSK( tid ) @ #i) ∧ (S1_PSK_DHE( tid ) @ #j)"
*/
by sorry

lemma S1_PSK_vs_S1 [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j. ((S1_PSK( tid ) @ #i) ∧ (S1( tid ) @ #j)) ⇒ (⊥)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j. (S1_PSK( tid ) @ #i) ∧ (S1( tid ) @ #j)"
*/
by sorry

lemma C1_vs_C1_PSK_DHE [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j. ((C1( tid ) @ #i) ∧ (C1_PSK_DHE( tid ) @ #j)) ⇒ (⊥)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j. (C1( tid ) @ #i) ∧ (C1_PSK_DHE( tid ) @ #j)"
*/
by sorry

lemma C1_PSK_vs_C1_PSK_DHE [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j.
    ((C1_PSK( tid ) @ #i) ∧ (C1_PSK_DHE( tid ) @ #j)) ⇒ (⊥)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j. (C1_PSK( tid ) @ #i) ∧ (C1_PSK_DHE( tid ) @ #j)"
*/
by sorry

lemma C1_PSK_vs_C1 [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j. ((C1_PSK( tid ) @ #i) ∧ (C1( tid ) @ #j)) ⇒ (⊥)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j. (C1_PSK( tid ) @ #i) ∧ (C1( tid ) @ #j)"
*/
by sorry

lemma S3_vs_S3_cert [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j. ((S3( tid ) @ #i) ∧ (S3_cert( tid ) @ #j)) ⇒ (⊥)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j. (S3( tid ) @ #i) ∧ (S3_cert( tid ) @ #j)"
*/
by sorry

lemma C3_vs_C3_cert [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j. ((C3( tid ) @ #i) ∧ (C3_cert( tid ) @ #j)) ⇒ (⊥)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j. (C3( tid ) @ #i) ∧ (C3_cert( tid ) @ #j)"
*/
by sorry

lemma S2d_vs_S2d_PSK [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j. ((S2d( tid ) @ #i) ∧ (S2d_PSK( tid ) @ #j)) ⇒ (⊥)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j. (S2d( tid ) @ #i) ∧ (S2d_PSK( tid ) @ #j)"
*/
by sorry

lemma C2d_vs_C2d_PSK [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j. ((C2d( tid ) @ #i) ∧ (C2d_PSK( tid ) @ #j)) ⇒ (⊥)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j. (C2d( tid ) @ #i) ∧ (C2d_PSK( tid ) @ #j)"
*/
by sorry

lemma cert_req_origin [sources]:
  all-traces
  "∀ certificate_request_context certificate_extensions keys #i.
    (!KU( senc(<'13', certificate_request_context, 
                certificate_extensions>,
               keys)
     ) @ #i) ⇒
    ((∃ #j. (!KU( certificate_request_context ) @ #j) ∧ (#j < #i)) ∨
     (∃ #j tid actor role.
       (RCertReqCtxt( tid, actor, role, certificate_request_context
        ) @ #j) ∧
       (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ certificate_request_context certificate_extensions keys #i.
  (!KU( senc(<'13', certificate_request_context, 
              certificate_extensions>,
             keys)
   ) @ #i)
 ∧
  (∀ #j. (!KU( certificate_request_context ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #j tid actor role.
    (RCertReqCtxt( tid, actor, role, certificate_request_context
     ) @ #j)
   ⇒
    ¬(#j < #i))"
*/
by sorry

lemma nst_source [sources]:
  all-traces
  "∀ ticket ticket_age_add tkt_lt tkt_exts app_key #i.
    (!KU( senc(<'4', tkt_lt, ticket_age_add, ticket, tkt_exts>,
               app_key)
     ) @ #i) ⇒
    ((∃ #j #k.
       (((!KU( ticket ) @ #j) ∧ (!KU( ticket_age_add ) @ #k)) ∧
        (#j < #i)) ∧
       (#k < #i)) ∨
     (∃ tid S #j.
       (RNST( tid, S, 'server', <ticket, ticket_age_add> ) @ #j) ∧
       (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ ticket ticket_age_add tkt_lt tkt_exts app_key #i.
  (!KU( senc(<'4', tkt_lt, ticket_age_add, ticket, tkt_exts>,
             app_key)
   ) @ #i)
 ∧
  (∀ #j #k.
    (!KU( ticket ) @ #j) ∧ (!KU( ticket_age_add ) @ #k)
   ⇒
    ((¬(#j < #i)) ∨ (¬(#k < #i)))) ∧
  (∀ tid S #j.
    (RNST( tid, S, 'server', <ticket, ticket_age_add> ) @ #j)
   ⇒
    ¬(#j < #i))"
*/
by sorry

lemma ku_extract [reuse, use_induction]:
  all-traces
  "∀ a b #i.
    (!KU( Extract(a, b) ) @ #i) ⇒
    (∃ #j #k.
      (((!KU( a ) @ #j) ∧ (!KU( b ) @ #k)) ∧ (#j < #i)) ∧ (#k < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ a b #i.
  (!KU( Extract(a, b) ) @ #i)
 ∧
  ∀ #j #k.
   (!KU( a ) @ #j) ∧ (!KU( b ) @ #k) ⇒ ((¬(#j < #i)) ∨ (¬(#k < #i)))"
*/
by sorry

lemma ku_expand [reuse, use_induction]:
  all-traces
  "∀ secret label len #i.
    (!KU( Expand(secret, label, len) ) @ #i) ⇒
    ((∃ #j. (!KU( secret ) @ #j) ∧ (#j < #i)) ∨
     ((¬(∃ #k. (!KU( secret ) @ #k) ∧ (#k < #i))) ∧
      (∃ actor #l.
        (RevealPSK( actor, Expand(secret, label, len) ) @ #l) ∧
        (#l < #i))))"
/*
guarded formula characterizing all counter-examples:
"∃ secret label len #i.
  (!KU( Expand(secret, label, len) ) @ #i)
 ∧
  (∀ #j. (!KU( secret ) @ #j) ⇒ ¬(#j < #i)) ∧
  (((∃ #k. (!KU( secret ) @ #k) ∧ #k < #i) ∨
    (∀ actor #l.
      (RevealPSK( actor, Expand(secret, label, len) ) @ #l)
     ⇒
      ¬(#l < #i))))"
*/
by sorry

lemma ku_ltk [reuse]:
  all-traces
  "∀ actor ltkA #i #j.
    ((GenLtk( actor, ltkA ) @ #i) ∧ (!KU( ltkA ) @ #j)) ⇒
    (∃ #k. (RevLtk( actor ) @ #k) ∧ (#k < #j))"
/*
guarded formula characterizing all counter-examples:
"∃ actor ltkA #i #j.
  (GenLtk( actor, ltkA ) @ #i) ∧ (!KU( ltkA ) @ #j)
 ∧
  ∀ #k. (RevLtk( actor ) @ #k) ⇒ ¬(#k < #j)"
*/
by sorry

lemma hsms_derive [reuse]:
  all-traces
  "∀ tid actor role hs ms #i.
    (RHSMS( tid, actor, role, <hs, ms> ) @ #i) ⇒
    (ms = Extract('0', hs))"
/*
guarded formula characterizing all counter-examples:
"∃ tid actor role hs ms #i.
  (RHSMS( tid, actor, role, <hs, ms> ) @ #i)
 ∧
  ¬(ms = Extract('0', hs))"
*/
by sorry

lemma posths_rms [reuse, use_induction]:
  all-traces
  "∀ tid actor role hs rms peer auth_status messages #i.
    (RPostHS( tid, actor, role, <hs, rms, peer, auth_status, messages>
     ) @ #i) ⇒
    (∃ aas pas ms #j.
      (((((RRMS( tid, actor, role, <peer, rms, messages> ) @ #j) ∧
          (ms = Extract('0', hs))) ∧
         (rms = Expand(ms, <'rms', h(messages)>, '32'))) ∧
        (#j < #i)) ∧
       (auth_status = <aas, pas>)) ∧
      ((∃ aas2 #k.
         (CIdentity( tid, actor, role, <peer, aas2, pas> ) @ #k) ∧
         (#k < #i)) ∨
       (∃ aas2 #k.
         (((CIdentityPost( tid, actor, role, <peer, aas2, pas> ) @ #k) ∧
           (role = 'server')) ∧
          (pas = 'auth')) ∧
         ((#k < #i) ∨ (#k = #i)))))"
/*
guarded formula characterizing all counter-examples:
"∃ tid actor role hs rms peer auth_status messages #i.
  (RPostHS( tid, actor, role, <hs, rms, peer, auth_status, messages>
   ) @ #i)
 ∧
  ∀ aas pas ms #j.
   (RRMS( tid, actor, role, <peer, rms, messages> ) @ #j) ∧
   (ms = Extract('0', hs)) ∧
   (rms = Expand(ms, <'rms', h(messages)>, '32')) ∧
   (auth_status = <aas, pas>)
  ⇒
   ((¬(#j < #i)) ∨
    ((∀ aas2 #k.
       (CIdentity( tid, actor, role, <peer, aas2, pas> ) @ #k)
      ⇒
       ¬(#k < #i)) ∧
     (∀ aas2 #k.
       (CIdentityPost( tid, actor, role, <peer, aas2, pas> ) @ #k) ∧
       (role = 'server') ∧
       (pas = 'auth')
      ⇒
       (¬(#k < #i)) ∧ (¬(#k = #i)))))"
*/
by sorry

lemma matching_transcripts_posths [reuse]:
  all-traces
  "∀ tid tid2 actor peer actor2 peer2 role role2 rms rms2 messages #i
     #j.
    (((RRMS( tid, actor, role, <peer2, rms, messages> ) @ #i) ∧
      (RRMS( tid2, peer, role2, <actor2, rms2, messages> ) @ #j)) ∧
     (¬(role = role2))) ⇒
    (rms = rms2)"
/*
guarded formula characterizing all counter-examples:
"∃ tid tid2 actor peer actor2 peer2 role role2 rms rms2 messages #i
   #j.
  (RRMS( tid, actor, role, <peer2, rms, messages> ) @ #i) ∧
  (RRMS( tid2, peer, role2, <actor2, rms2, messages> ) @ #j)
 ∧
  (¬(role = role2)) ∧ (¬(rms = rms2))"
*/
by sorry

lemma matching_rms_posths [reuse]:
  all-traces
  "∀ tid tid2 actor peer actor2 peer2 role role2 rms messages
     messages2 #i #j.
    (((RRMS( tid, actor, role, <peer2, rms, messages> ) @ #i) ∧
      (RRMS( tid2, peer, role2, <actor2, rms, messages2> ) @ #j)) ∧
     (¬(role = role2))) ⇒
    (messages = messages2)"
/*
guarded formula characterizing all counter-examples:
"∃ tid tid2 actor peer actor2 peer2 role role2 rms messages
   messages2 #i #j.
  (RRMS( tid, actor, role, <peer2, rms, messages> ) @ #i) ∧
  (RRMS( tid2, peer, role2, <actor2, rms, messages2> ) @ #j)
 ∧
  (¬(role = role2)) ∧ (¬(messages = messages2))"
*/
by sorry

lemma rms_derives_hs [reuse, hide_lemma=sig_origin]:
  all-traces
  "∀ tid actor role peer hs rms messages #i #j #k.
    (((RRMS( tid, actor, role, <peer, rms, messages> ) @ #j) ∧
      (CHS( tid, actor, role, hs ) @ #i)) ∧
     (!KU( rms ) @ #k)) ⇒
    (((∃ ms #l.
        ((ms = Extract('0', hs)) ∧ (!KU( hs ) @ #l)) ∧ (#l < #k)) ∨
      (∃ #l. (RevealPSK( actor, rms ) @ #l) ∧ (#l < #k))) ∨
     (∃ #l. (RevealPSK( peer, rms ) @ #l) ∧ (#l < #k)))"
/*
guarded formula characterizing all counter-examples:
"∃ tid actor role peer hs rms messages #i #j #k.
  (RRMS( tid, actor, role, <peer, rms, messages> ) @ #j) ∧
  (CHS( tid, actor, role, hs ) @ #i) ∧
  (!KU( rms ) @ #k)
 ∧
  (∀ ms #l.
    (ms = Extract('0', hs)) ∧ (!KU( hs ) @ #l) ⇒ ¬(#l < #k)) ∧
  (∀ #l. (RevealPSK( actor, rms ) @ #l) ⇒ ¬(#l < #k)) ∧
  (∀ #l. (RevealPSK( peer, rms ) @ #l) ⇒ ¬(#l < #k))"
*/
by sorry

lemma sig_origin [reuse]:
  all-traces
  "∀ certificate cert_exts certificate_request_context signature
     verify_data hs_key sig_messages ltkA #i.
    ((!KU( senc(<
                 <'11', certificate_request_context, cert_exts, certificate>, 
                 <'15', signature>, '20', verify_data>,
                hs_key)
      ) @ #i) ∧
     (signature = sign(sig_messages, ltkA))) ⇒
    ((∃ #j. (!KU( ltkA ) @ #j) ∧ (#j < #i)) ∨
     (∃ #k. (UseLtk( ltkA, signature ) @ #k) ∧ (#k < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ certificate cert_exts certificate_request_context signature
   verify_data hs_key sig_messages ltkA #i.
  (!KU( senc(<
              <'11', certificate_request_context, cert_exts, certificate>, 
              <'15', signature>, '20', verify_data>,
             hs_key)
   ) @ #i) ∧
  (signature = sign(sig_messages, ltkA))
 ∧
  (∀ #j. (!KU( ltkA ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #k. (UseLtk( ltkA, signature ) @ #k) ⇒ ¬(#k < #i))"
*/
by sorry

lemma post_master_secret [reuse, hide_lemma=posths_rms]:
  all-traces
  "∀ tid actor peer role hs rms aas messages #i #k.
    ((((RPostHS( tid, actor, role,
                 <hs, rms, peer, <aas, 'auth'>, messages>
        ) @ #i) ∧
       (CHS( tid, actor, role, hs ) @ #i)) ∧
      (CIdentityPost( tid, actor, role, <peer, aas, 'auth'> ) @ #i)) ∧
     (!KU( rms ) @ #k)) ⇒
    (((((∃ #r. (RevLtk( peer ) @ #r) ∧ (#r < #i)) ∨
        (∃ tid3 x #r. (RevDHExp( tid3, peer, x ) @ #r) ∧ (#r < #i))) ∨
       (∃ tid4 y #r. (RevDHExp( tid4, actor, y ) @ #r) ∧ (#r < #i))) ∨
      (∃ rms2 #r. (RevealPSK( actor, rms2 ) @ #r) ∧ (#r < #k))) ∨
     (∃ rms2 #r. (RevealPSK( peer, rms2 ) @ #r) ∧ (#r < #k)))"
/*
guarded formula characterizing all counter-examples:
"∃ tid actor peer role hs rms aas messages #i #k.
  (RPostHS( tid, actor, role,
            <hs, rms, peer, <aas, 'auth'>, messages>
   ) @ #i) ∧
  (CHS( tid, actor, role, hs ) @ #i) ∧
  (CIdentityPost( tid, actor, role, <peer, aas, 'auth'> ) @ #i) ∧
  (!KU( rms ) @ #k)
 ∧
  (∀ #r. (RevLtk( peer ) @ #r) ⇒ ¬(#r < #i)) ∧
  (∀ tid3 x #r. (RevDHExp( tid3, peer, x ) @ #r) ⇒ ¬(#r < #i)) ∧
  (∀ tid4 y #r. (RevDHExp( tid4, actor, y ) @ #r) ⇒ ¬(#r < #i)) ∧
  (∀ rms2 #r. (RevealPSK( actor, rms2 ) @ #r) ⇒ ¬(#r < #k)) ∧
  (∀ rms2 #r. (RevealPSK( peer, rms2 ) @ #r) ⇒ ¬(#r < #k))"
*/
by sorry

lemma invariant_post_hs [reuse, use_induction,
                         hide_lemma=posths_rms]:
  all-traces
  "∀ tid actor peer peer2 role hs hs2 rms rms2 as as2 msgs msgs2 #i
     #j.
    ((RPostHS( tid, actor, role, <hs, rms, peer, as, msgs> ) @ #i) ∧
     (RPostHS( tid, actor, role, <hs2, rms2, peer2, as2, msgs2>
      ) @ #j)) ⇒
    ((((peer = peer2) ∧ (rms = rms2)) ∧ (msgs = msgs2)) ∧ (hs = hs2))"
/*
guarded formula characterizing all counter-examples:
"∃ tid actor peer peer2 role hs hs2 rms rms2 as as2 msgs msgs2 #i
   #j.
  (RPostHS( tid, actor, role, <hs, rms, peer, as, msgs> ) @ #i) ∧
  (RPostHS( tid, actor, role, <hs2, rms2, peer2, as2, msgs2> ) @ #j)
 ∧
  ((¬(peer = peer2)) ∨
   (¬(rms = rms2)) ∨
   (¬(msgs = msgs2)) ∨
   (¬(hs = hs2)))"
*/
by sorry

lemma handshake_secret [reuse, use_induction,
                        hide_lemma=posths_rms_weak]:
  all-traces
  "∀ tid actor peer role hs aas nc ns #i #k.
    ((((CHS( tid, actor, role, hs ) @ #i) ∧
       (CIdentity( tid, actor, role, <peer, aas, 'auth'> ) @ #i)) ∧
      (CNonces( tid, actor, role, <nc, ns> ) @ #i)) ∧
     (!KU( hs ) @ #k)) ⇒
    ((((((∃ #r. (RevLtk( peer ) @ #r) ∧ (#r < #i)) ∨
         (∃ delegate #j #r.
           (((CDC( tid, actor, role, <peer, delegate> ) @ #j) ∧ (#j < #i)) ∧
            (RevLtk( delegate ) @ #r)) ∧
           (#r < #j))) ∨
        (∃ tid3 x #r. (RevDHExp( tid3, peer, x ) @ #r) ∧ (#r < #i))) ∨
       (∃ tid4 y #r. (RevDHExp( tid4, actor, y ) @ #r) ∧ (#r < #i))) ∨
      (∃ rms #r. (RevealPSK( actor, rms ) @ #r) ∧ (#r < #k))) ∨
     (∃ rms #r. (RevealPSK( peer, rms ) @ #r) ∧ (#r < #k)))"
/*
guarded formula characterizing all counter-examples:
"∃ tid actor peer role hs aas nc ns #i #k.
  (CHS( tid, actor, role, hs ) @ #i) ∧
  (CIdentity( tid, actor, role, <peer, aas, 'auth'> ) @ #i) ∧
  (CNonces( tid, actor, role, <nc, ns> ) @ #i) ∧
  (!KU( hs ) @ #k)
 ∧
  (∀ #r. (RevLtk( peer ) @ #r) ⇒ ¬(#r < #i)) ∧
  (∀ delegate #j #r.
    (CDC( tid, actor, role, <peer, delegate> ) @ #j) ∧
    (RevLtk( delegate ) @ #r)
   ⇒
    ((¬(#j < #i)) ∨ (¬(#r < #j)))) ∧
  (∀ tid3 x #r. (RevDHExp( tid3, peer, x ) @ #r) ⇒ ¬(#r < #i)) ∧
  (∀ tid4 y #r. (RevDHExp( tid4, actor, y ) @ #r) ⇒ ¬(#r < #i)) ∧
  (∀ rms #r. (RevealPSK( actor, rms ) @ #r) ⇒ ¬(#r < #k)) ∧
  (∀ rms #r. (RevealPSK( peer, rms ) @ #r) ⇒ ¬(#r < #k))"
*/
by sorry

lemma secret_session_keys [hide_lemma=sig_origin,
                           hide_lemma=posths_rms]:
  all-traces
  "∀ tid actor peer kw kr pas #i.
    (((((((SessionKey( tid, actor, peer, <pas, 'auth'>, <kw, kr>
           ) @ #i) ∧
          (¬(∃ #r. (RevLtk( peer ) @ #r) ∧ (#r < #i)))) ∧
         (¬(∃ delegate role #r.
             ((CDC( tid, actor, role, <peer, delegate> ) @ #i) ∧
              (RevLtk( delegate ) @ #r)) ∧
             (#r < #i)))) ∧
        (¬(∃ tid3 x #r. (RevDHExp( tid3, peer, x ) @ #r) ∧ (#r < #i)))) ∧
       (¬(∃ tid4 y #r. (RevDHExp( tid4, actor, y ) @ #r) ∧ (#r < #i)))) ∧
      (¬(∃ rms #r. RevealPSK( actor, rms ) @ #r))) ∧
     (¬(∃ rms #r. RevealPSK( peer, rms ) @ #r))) ⇒
    (¬(∃ #j. K( kr ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ tid actor peer kw kr pas #i.
  (SessionKey( tid, actor, peer, <pas, 'auth'>, <kw, kr> ) @ #i)
 ∧
  (∀ #r. (RevLtk( peer ) @ #r) ⇒ ¬(#r < #i)) ∧
  (∀ delegate role #r.
    (CDC( tid, actor, role, <peer, delegate> ) @ #i) ∧
    (RevLtk( delegate ) @ #r)
   ⇒
    ¬(#r < #i)) ∧
  (∀ tid3 x #r. (RevDHExp( tid3, peer, x ) @ #r) ⇒ ¬(#r < #i)) ∧
  (∀ tid4 y #r. (RevDHExp( tid4, actor, y ) @ #r) ⇒ ¬(#r < #i)) ∧
  (∀ rms #r. (RevealPSK( actor, rms ) @ #r) ⇒ ⊥) ∧
  (∀ rms #r. (RevealPSK( peer, rms ) @ #r) ⇒ ⊥) ∧
  (∃ #j. (K( kr ) @ #j))"
*/
simplify
solve( SessionKey( tid, actor, peer, <pas, 'auth'>, <kw, kr>
       ) @ #i )
  case client_auth
  solve( (∃ #j. (!KU( p_sats ) @ #j) ∧ #j < #vk)  ∥
         ((∀ #k. (!KU( p_sats ) @ #k) ⇒ ¬(#k < #vk)) ∧
          (∃ actor #l.
            (RevealPSK( actor, Expand(p_sats, <'adke_wk', '0'>, '32') ) @ #l)
           ∧
            #l < #vk)) )
    case case_1
    solve( !KU( Expand(p_sats, <'adke_wk', '0'>, '32') ) @ #vk )
      case c_Expand
      solve( F_State_C3( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns,
                         p_g, p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode,
                         p_psk_id, p_edi, p_es, p_hs, Extract('0', p_hs), p_cats, p_sats,
                         p_hs_keyc, p_hs_keys, <pas, 'auth'>, p_ems, p_rms, '0'
             )[no_precomp] ▶₀ #i )
        case recv_server_auth
        solve( (∃ #j.2.
                 (!KU( Extract('0', p_hs) ) @ #j.2) ∧ #j.2 < #j.1)  ∥
               ((∀ #k. (!KU( Extract('0', p_hs) ) @ #k) ⇒ ¬(#k < #j.1)) ∧
                (∃ actor #l.
                  (RevealPSK( actor,
                              Expand(Extract('0', p_hs),
                                     <'serverats', 
                                      h(<
                                         <<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', 
                                          sign(<'server_cv', 
                                                h(<p_messages, '11', '0', 'ce', pk(~ltkS)>)>,
                                               ~ltkS)
                                         >, 
                                         '20', 
                                         hmac(<
                                               Expand(Expand(p_hs,
                                                             <'serverhts', 
                                                              h(<
                                                                 <p_messages, '11', '0', 'ce', 
                                                                  pk(~ltkS)>, 
                                                                 '15', 
                                                                 sign(<'server_cv', 
                                                                       h(<p_messages, '11', '0', 
                                                                          'ce', pk(~ltkS)>)
                                                                      >,
                                                                      ~ltkS)
                                                                >)
                                                             >,
                                                             '32'),
                                                      <'fin', '0'>, '32'), 
                                               h(<<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', 
                                                  sign(<'server_cv', 
                                                        h(<p_messages, '11', '0', 'ce', pk(~ltkS)>)
                                                       >,
                                                       ~ltkS)
                                                 >)
                                              >)
                                        >)
                                     >,
                                     '32')
                   ) @ #l)
                 ∧
                  #l < #j.1)) )
          case case_1
          solve( (∃ #r. (RevLtk( $S ) @ #r) ∧ #r < #vr)  ∥
                 (∃ delegate #j #r.
                   (CDC( ~tid, $C, 'client', <$S, delegate> ) @ #j) ∧
                   (RevLtk( delegate ) @ #r)
                  ∧
                   (#j < #vr) ∧ (#r < #j))  ∥
                 (∃ tid3 x #r. (RevDHExp( tid3, $S, x ) @ #r) ∧ #r < #vr)  ∥
                 (∃ tid4 y #r. (RevDHExp( tid4, $C, y ) @ #r) ∧ #r < #vr)  ∥
                 (∃ rms #r. (RevealPSK( $C, rms ) @ #r) ∧ #r < #k)  ∥
                 (∃ rms #r. (RevealPSK( $S, rms ) @ #r) ∧ #r < #k) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          next
            case case_4
            by contradiction /* from formulas */
          next
            case case_5
            by contradiction /* from formulas */
          next
            case case_6
            by contradiction /* from formulas */
          qed
        next
          case case_2
          by solve( RevealPSK( actor,
                               Expand(Extract('0', p_hs),
                                      <'serverats', 
                                       h(<
                                          <<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', 
                                           sign(<'server_cv', 
                                                 h(<p_messages, '11', '0', 'ce', pk(~ltkS)>)>,
                                                ~ltkS)
                                          >, 
                                          '20', 
                                          hmac(<
                                                Expand(Expand(p_hs,
                                                              <'serverhts', 
                                                               h(<
                                                                  <p_messages, '11', '0', 'ce', 
                                                                   pk(~ltkS)>, 
                                                                  '15', 
                                                                  sign(<'server_cv', 
                                                                        h(<p_messages, '11', '0', 
                                                                           'ce', pk(~ltkS)>)
                                                                       >,
                                                                       ~ltkS)
                                                                 >)
                                                              >,
                                                              '32'),
                                                       <'fin', '0'>, '32'), 
                                                h(<<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', 
                                                   sign(<'server_cv', 
                                                         h(<p_messages, '11', '0', 'ce', pk(~ltkS)>)
                                                        >,
                                                        ~ltkS)
                                                  >)
                                               >)
                                         >)
                                      >,
                                      '32')
                    ) @ #l )
        qed
      next
        case recv_server_auth_DC
        solve( (∃ #j.2.
                 (!KU( Extract('0', p_hs) ) @ #j.2) ∧ #j.2 < #j.1)  ∥
               ((∀ #k. (!KU( Extract('0', p_hs) ) @ #k) ⇒ ¬(#k < #j.1)) ∧
                (∃ actor #l.
                  (RevealPSK( actor,
                              Expand(Extract('0', p_hs),
                                     <'serverats', 
                                      h(<
                                         <
                                          <p_messages, '11', '0', 
                                           <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                                            sign(<'TLSserverdelegatedcredentials', pk(~ltkS), 
                                                  <'time', $sig_alg, pk(~ltkE)>, $sig_alg>,
                                                 ~ltkS)
                                           >, 
                                           pk(~ltkS)>, 
                                          '15', 
                                          sign(<'server_cv', 
                                                h(<p_messages, '11', '0', 
                                                   <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, 
                                                    $sig_alg, 
                                                    sign(<'TLSserverdelegatedcredentials', 
                                                          pk(~ltkS), <'time', $sig_alg, pk(~ltkE)>, 
                                                          $sig_alg>,
                                                         ~ltkS)
                                                   >, 
                                                   pk(~ltkS)>)
                                               >,
                                               ~ltkE)
                                         >, 
                                         '20', 
                                         hmac(<
                                               Expand(Expand(p_hs,
                                                             <'serverhts', 
                                                              h(<
                                                                 <p_messages, '11', '0', 
                                                                  <'ce', 'TBD', 
                                                                   <'time', $sig_alg, pk(~ltkE)>, 
                                                                   $sig_alg, 
                                                                   sign(<
                                                                         'TLSserverdelegatedcredentials', 
                                                                         pk(~ltkS), 
                                                                         <'time', $sig_alg, 
                                                                          pk(~ltkE)>, 
                                                                         $sig_alg>,
                                                                        ~ltkS)
                                                                  >, 
                                                                  pk(~ltkS)>, 
                                                                 '15', 
                                                                 sign(<'server_cv', 
                                                                       h(<p_messages, '11', '0', 
                                                                          <'ce', 'TBD', 
                                                                           <'time', $sig_alg, 
                                                                            pk(~ltkE)>, 
                                                                           $sig_alg, 
                                                                           sign(<
                                                                                 'TLSserverdelegatedcredentials', 
                                                                                 pk(~ltkS), 
                                                                                 <'time', $sig_alg, 
                                                                                  pk(~ltkE)>, 
                                                                                 $sig_alg>,
                                                                                ~ltkS)
                                                                          >, 
                                                                          pk(~ltkS)>)
                                                                      >,
                                                                      ~ltkE)
                                                                >)
                                                             >,
                                                             '32'),
                                                      <'fin', '0'>, '32'), 
                                               h(<
                                                  <p_messages, '11', '0', 
                                                   <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, 
                                                    $sig_alg, 
                                                    sign(<'TLSserverdelegatedcredentials', 
                                                          pk(~ltkS), <'time', $sig_alg, pk(~ltkE)>, 
                                                          $sig_alg>,
                                                         ~ltkS)
                                                   >, 
                                                   pk(~ltkS)>, 
                                                  '15', 
                                                  sign(<'server_cv', 
                                                        h(<p_messages, '11', '0', 
                                                           <'ce', 'TBD', 
                                                            <'time', $sig_alg, pk(~ltkE)>, 
                                                            $sig_alg, 
                                                            sign(<'TLSserverdelegatedcredentials', 
                                                                  pk(~ltkS), 
                                                                  <'time', $sig_alg, pk(~ltkE)>, 
                                                                  $sig_alg>,
                                                                 ~ltkS)
                                                           >, 
                                                           pk(~ltkS)>)
                                                       >,
                                                       ~ltkE)
                                                 >)
                                              >)
                                        >)
                                     >,
                                     '32')
                   ) @ #l)
                 ∧
                  #l < #j.1)) )
          case case_1
          solve( (∃ #r. (RevLtk( $S ) @ #r) ∧ #r < #vr)  ∥
                 (∃ delegate #j #r.
                   (CDC( ~tid, $C, 'client', <$S, delegate> ) @ #j) ∧
                   (RevLtk( delegate ) @ #r)
                  ∧
                   (#j < #vr) ∧ (#r < #j))  ∥
                 (∃ tid3 x #r. (RevDHExp( tid3, $S, x ) @ #r) ∧ #r < #vr)  ∥
                 (∃ tid4 y #r. (RevDHExp( tid4, $C, y ) @ #r) ∧ #r < #vr)  ∥
                 (∃ rms #r. (RevealPSK( $C, rms ) @ #r) ∧ #r < #k)  ∥
                 (∃ rms #r. (RevealPSK( $S, rms ) @ #r) ∧ #r < #k) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* cyclic */
          next
            case case_3
            by contradiction /* from formulas */
          next
            case case_4
            by contradiction /* from formulas */
          next
            case case_5
            by contradiction /* from formulas */
          next
            case case_6
            by contradiction /* from formulas */
          qed
        next
          case case_2
          by solve( RevealPSK( actor,
                               Expand(Extract('0', p_hs),
                                      <'serverats', 
                                       h(<
                                          <
                                           <p_messages, '11', '0', 
                                            <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                                             sign(<'TLSserverdelegatedcredentials', pk(~ltkS), 
                                                   <'time', $sig_alg, pk(~ltkE)>, $sig_alg>,
                                                  ~ltkS)
                                            >, 
                                            pk(~ltkS)>, 
                                           '15', 
                                           sign(<'server_cv', 
                                                 h(<p_messages, '11', '0', 
                                                    <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, 
                                                     $sig_alg, 
                                                     sign(<'TLSserverdelegatedcredentials', 
                                                           pk(~ltkS), 
                                                           <'time', $sig_alg, pk(~ltkE)>, $sig_alg>,
                                                          ~ltkS)
                                                    >, 
                                                    pk(~ltkS)>)
                                                >,
                                                ~ltkE)
                                          >, 
                                          '20', 
                                          hmac(<
                                                Expand(Expand(p_hs,
                                                              <'serverhts', 
                                                               h(<
                                                                  <p_messages, '11', '0', 
                                                                   <'ce', 'TBD', 
                                                                    <'time', $sig_alg, pk(~ltkE)>, 
                                                                    $sig_alg, 
                                                                    sign(<
                                                                          'TLSserverdelegatedcredentials', 
                                                                          pk(~ltkS), 
                                                                          <'time', $sig_alg, 
                                                                           pk(~ltkE)>, 
                                                                          $sig_alg>,
                                                                         ~ltkS)
                                                                   >, 
                                                                   pk(~ltkS)>, 
                                                                  '15', 
                                                                  sign(<'server_cv', 
                                                                        h(<p_messages, '11', '0', 
                                                                           <'ce', 'TBD', 
                                                                            <'time', $sig_alg, 
                                                                             pk(~ltkE)>, 
                                                                            $sig_alg, 
                                                                            sign(<
                                                                                  'TLSserverdelegatedcredentials', 
                                                                                  pk(~ltkS), 
                                                                                  <'time', 
                                                                                   $sig_alg, 
                                                                                   pk(~ltkE)>, 
                                                                                  $sig_alg>,
                                                                                 ~ltkS)
                                                                           >, 
                                                                           pk(~ltkS)>)
                                                                       >,
                                                                       ~ltkE)
                                                                 >)
                                                              >,
                                                              '32'),
                                                       <'fin', '0'>, '32'), 
                                                h(<
                                                   <p_messages, '11', '0', 
                                                    <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, 
                                                     $sig_alg, 
                                                     sign(<'TLSserverdelegatedcredentials', 
                                                           pk(~ltkS), 
                                                           <'time', $sig_alg, pk(~ltkE)>, $sig_alg>,
                                                          ~ltkS)
                                                    >, 
                                                    pk(~ltkS)>, 
                                                   '15', 
                                                   sign(<'server_cv', 
                                                         h(<p_messages, '11', '0', 
                                                            <'ce', 'TBD', 
                                                             <'time', $sig_alg, pk(~ltkE)>, 
                                                             $sig_alg, 
                                                             sign(<'TLSserverdelegatedcredentials', 
                                                                   pk(~ltkS), 
                                                                   <'time', $sig_alg, pk(~ltkE)>, 
                                                                   $sig_alg>,
                                                                  ~ltkS)
                                                            >, 
                                                            pk(~ltkS)>)
                                                        >,
                                                        ~ltkE)
                                                  >)
                                               >)
                                         >)
                                      >,
                                      '32')
                    ) @ #l )
        qed
      qed
    qed
  next
    case case_2
    by solve( RevealPSK( actor, Expand(p_sats, <'adke_wk', '0'>, '32')
              ) @ #l )
  qed
next
  case client_auth_cert
  solve( (∃ #j. (!KU( p_sats ) @ #j) ∧ #j < #vk)  ∥
         ((∀ #k. (!KU( p_sats ) @ #k) ⇒ ¬(#k < #vk)) ∧
          (∃ actor #l.
            (RevealPSK( actor, Expand(p_sats, <'adke_wk', '0'>, '32') ) @ #l)
           ∧
            #l < #vk)) )
    case case_1
    solve( F_State_C3( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns,
                       p_g, p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, 'na', p_psk_id,
                       p_edi, p_es, p_hs, Extract('0', p_hs), p_cats, p_sats, p_hs_keyc,
                       p_hs_keys, p_auth_status, p_ems, p_rms, '1'
           )[no_precomp] ▶₀ #i )
      case recv_server_auth
      solve( (∃ #j.2.
               (!KU( Extract('0', p_hs) ) @ #j.2) ∧ #j.2 < #j.1)  ∥
             ((∀ #k. (!KU( Extract('0', p_hs) ) @ #k) ⇒ ¬(#k < #j.1)) ∧
              (∃ actor #l.
                (RevealPSK( actor,
                            Expand(Extract('0', p_hs),
                                   <'serverats', 
                                    h(<
                                       <<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', 
                                        sign(<'server_cv', 
                                              h(<p_messages, '11', '0', 'ce', pk(~ltkS)>)>,
                                             ~ltkS)
                                       >, 
                                       '20', 
                                       hmac(<
                                             Expand(Expand(p_hs,
                                                           <'serverhts', 
                                                            h(<
                                                               <p_messages, '11', '0', 'ce', 
                                                                pk(~ltkS)>, 
                                                               '15', 
                                                               sign(<'server_cv', 
                                                                     h(<p_messages, '11', '0', 
                                                                        'ce', pk(~ltkS)>)
                                                                    >,
                                                                    ~ltkS)
                                                              >)
                                                           >,
                                                           '32'),
                                                    <'fin', '0'>, '32'), 
                                             h(<<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', 
                                                sign(<'server_cv', 
                                                      h(<p_messages, '11', '0', 'ce', pk(~ltkS)>)>,
                                                     ~ltkS)
                                               >)
                                            >)
                                      >)
                                   >,
                                   '32')
                 ) @ #l)
               ∧
                #l < #j.1)) )
        case case_1
        solve( (∃ #r. (RevLtk( $S ) @ #r) ∧ #r < #vr)  ∥
               (∃ delegate #j #r.
                 (CDC( ~tid, $C, 'client', <$S, delegate> ) @ #j) ∧
                 (RevLtk( delegate ) @ #r)
                ∧
                 (#j < #vr) ∧ (#r < #j))  ∥
               (∃ tid3 x #r. (RevDHExp( tid3, $S, x ) @ #r) ∧ #r < #vr)  ∥
               (∃ tid4 y #r. (RevDHExp( tid4, $C, y ) @ #r) ∧ #r < #vr)  ∥
               (∃ rms #r. (RevealPSK( $C, rms ) @ #r) ∧ #r < #k)  ∥
               (∃ rms #r. (RevealPSK( $S, rms ) @ #r) ∧ #r < #k) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_3
          by contradiction /* from formulas */
        next
          case case_4
          by contradiction /* from formulas */
        next
          case case_5
          by contradiction /* from formulas */
        next
          case case_6
          by contradiction /* from formulas */
        qed
      next
        case case_2
        by solve( RevealPSK( actor,
                             Expand(Extract('0', p_hs),
                                    <'serverats', 
                                     h(<
                                        <<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', 
                                         sign(<'server_cv', 
                                               h(<p_messages, '11', '0', 'ce', pk(~ltkS)>)>,
                                              ~ltkS)
                                        >, 
                                        '20', 
                                        hmac(<
                                              Expand(Expand(p_hs,
                                                            <'serverhts', 
                                                             h(<
                                                                <p_messages, '11', '0', 'ce', 
                                                                 pk(~ltkS)>, 
                                                                '15', 
                                                                sign(<'server_cv', 
                                                                      h(<p_messages, '11', '0', 
                                                                         'ce', pk(~ltkS)>)
                                                                     >,
                                                                     ~ltkS)
                                                               >)
                                                            >,
                                                            '32'),
                                                     <'fin', '0'>, '32'), 
                                              h(<<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', 
                                                 sign(<'server_cv', 
                                                       h(<p_messages, '11', '0', 'ce', pk(~ltkS)>)>,
                                                      ~ltkS)
                                                >)
                                             >)
                                       >)
                                    >,
                                    '32')
                  ) @ #l )
      qed
    next
      case recv_server_auth_DC
      solve( (∃ #j.2.
               (!KU( Extract('0', p_hs) ) @ #j.2) ∧ #j.2 < #j.1)  ∥
             ((∀ #k. (!KU( Extract('0', p_hs) ) @ #k) ⇒ ¬(#k < #j.1)) ∧
              (∃ actor #l.
                (RevealPSK( actor,
                            Expand(Extract('0', p_hs),
                                   <'serverats', 
                                    h(<
                                       <
                                        <p_messages, '11', '0', 
                                         <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                                          sign(<'TLSserverdelegatedcredentials', pk(~ltkS), 
                                                <'time', $sig_alg, pk(~ltkE)>, $sig_alg>,
                                               ~ltkS)
                                         >, 
                                         pk(~ltkS)>, 
                                        '15', 
                                        sign(<'server_cv', 
                                              h(<p_messages, '11', '0', 
                                                 <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, 
                                                  $sig_alg, 
                                                  sign(<'TLSserverdelegatedcredentials', pk(~ltkS), 
                                                        <'time', $sig_alg, pk(~ltkE)>, $sig_alg>,
                                                       ~ltkS)
                                                 >, 
                                                 pk(~ltkS)>)
                                             >,
                                             ~ltkE)
                                       >, 
                                       '20', 
                                       hmac(<
                                             Expand(Expand(p_hs,
                                                           <'serverhts', 
                                                            h(<
                                                               <p_messages, '11', '0', 
                                                                <'ce', 'TBD', 
                                                                 <'time', $sig_alg, pk(~ltkE)>, 
                                                                 $sig_alg, 
                                                                 sign(<
                                                                       'TLSserverdelegatedcredentials', 
                                                                       pk(~ltkS), 
                                                                       <'time', $sig_alg, pk(~ltkE)
                                                                       >, 
                                                                       $sig_alg>,
                                                                      ~ltkS)
                                                                >, 
                                                                pk(~ltkS)>, 
                                                               '15', 
                                                               sign(<'server_cv', 
                                                                     h(<p_messages, '11', '0', 
                                                                        <'ce', 'TBD', 
                                                                         <'time', $sig_alg, 
                                                                          pk(~ltkE)>, 
                                                                         $sig_alg, 
                                                                         sign(<
                                                                               'TLSserverdelegatedcredentials', 
                                                                               pk(~ltkS), 
                                                                               <'time', $sig_alg, 
                                                                                pk(~ltkE)>, 
                                                                               $sig_alg>,
                                                                              ~ltkS)
                                                                        >, 
                                                                        pk(~ltkS)>)
                                                                    >,
                                                                    ~ltkE)
                                                              >)
                                                           >,
                                                           '32'),
                                                    <'fin', '0'>, '32'), 
                                             h(<
                                                <p_messages, '11', '0', 
                                                 <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, 
                                                  $sig_alg, 
                                                  sign(<'TLSserverdelegatedcredentials', pk(~ltkS), 
                                                        <'time', $sig_alg, pk(~ltkE)>, $sig_alg>,
                                                       ~ltkS)
                                                 >, 
                                                 pk(~ltkS)>, 
                                                '15', 
                                                sign(<'server_cv', 
                                                      h(<p_messages, '11', '0', 
                                                         <'ce', 'TBD', 
                                                          <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                                                          sign(<'TLSserverdelegatedcredentials', 
                                                                pk(~ltkS), 
                                                                <'time', $sig_alg, pk(~ltkE)>, 
                                                                $sig_alg>,
                                                               ~ltkS)
                                                         >, 
                                                         pk(~ltkS)>)
                                                     >,
                                                     ~ltkE)
                                               >)
                                            >)
                                      >)
                                   >,
                                   '32')
                 ) @ #l)
               ∧
                #l < #j.1)) )
        case case_1
        solve( (∃ #r. (RevLtk( $S ) @ #r) ∧ #r < #vr)  ∥
               (∃ delegate #j #r.
                 (CDC( ~tid, $C, 'client', <$S, delegate> ) @ #j) ∧
                 (RevLtk( delegate ) @ #r)
                ∧
                 (#j < #vr) ∧ (#r < #j))  ∥
               (∃ tid3 x #r. (RevDHExp( tid3, $S, x ) @ #r) ∧ #r < #vr)  ∥
               (∃ tid4 y #r. (RevDHExp( tid4, $C, y ) @ #r) ∧ #r < #vr)  ∥
               (∃ rms #r. (RevealPSK( $C, rms ) @ #r) ∧ #r < #k)  ∥
               (∃ rms #r. (RevealPSK( $S, rms ) @ #r) ∧ #r < #k) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          by contradiction /* cyclic */
        next
          case case_3
          by contradiction /* from formulas */
        next
          case case_4
          by contradiction /* from formulas */
        next
          case case_5
          by contradiction /* from formulas */
        next
          case case_6
          by contradiction /* from formulas */
        qed
      next
        case case_2
        by solve( RevealPSK( actor,
                             Expand(Extract('0', p_hs),
                                    <'serverats', 
                                     h(<
                                        <
                                         <p_messages, '11', '0', 
                                          <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                                           sign(<'TLSserverdelegatedcredentials', pk(~ltkS), 
                                                 <'time', $sig_alg, pk(~ltkE)>, $sig_alg>,
                                                ~ltkS)
                                          >, 
                                          pk(~ltkS)>, 
                                         '15', 
                                         sign(<'server_cv', 
                                               h(<p_messages, '11', '0', 
                                                  <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, 
                                                   $sig_alg, 
                                                   sign(<'TLSserverdelegatedcredentials', 
                                                         pk(~ltkS), <'time', $sig_alg, pk(~ltkE)>, 
                                                         $sig_alg>,
                                                        ~ltkS)
                                                  >, 
                                                  pk(~ltkS)>)
                                              >,
                                              ~ltkE)
                                        >, 
                                        '20', 
                                        hmac(<
                                              Expand(Expand(p_hs,
                                                            <'serverhts', 
                                                             h(<
                                                                <p_messages, '11', '0', 
                                                                 <'ce', 'TBD', 
                                                                  <'time', $sig_alg, pk(~ltkE)>, 
                                                                  $sig_alg, 
                                                                  sign(<
                                                                        'TLSserverdelegatedcredentials', 
                                                                        pk(~ltkS), 
                                                                        <'time', $sig_alg, pk(~ltkE)
                                                                        >, 
                                                                        $sig_alg>,
                                                                       ~ltkS)
                                                                 >, 
                                                                 pk(~ltkS)>, 
                                                                '15', 
                                                                sign(<'server_cv', 
                                                                      h(<p_messages, '11', '0', 
                                                                         <'ce', 'TBD', 
                                                                          <'time', $sig_alg, 
                                                                           pk(~ltkE)>, 
                                                                          $sig_alg, 
                                                                          sign(<
                                                                                'TLSserverdelegatedcredentials', 
                                                                                pk(~ltkS), 
                                                                                <'time', $sig_alg, 
                                                                                 pk(~ltkE)>, 
                                                                                $sig_alg>,
                                                                               ~ltkS)
                                                                         >, 
                                                                         pk(~ltkS)>)
                                                                     >,
                                                                     ~ltkE)
                                                               >)
                                                            >,
                                                            '32'),
                                                     <'fin', '0'>, '32'), 
                                              h(<
                                                 <p_messages, '11', '0', 
                                                  <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, 
                                                   $sig_alg, 
                                                   sign(<'TLSserverdelegatedcredentials', 
                                                         pk(~ltkS), <'time', $sig_alg, pk(~ltkE)>, 
                                                         $sig_alg>,
                                                        ~ltkS)
                                                  >, 
                                                  pk(~ltkS)>, 
                                                 '15', 
                                                 sign(<'server_cv', 
                                                       h(<p_messages, '11', '0', 
                                                          <'ce', 'TBD', 
                                                           <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                                                           sign(<'TLSserverdelegatedcredentials', 
                                                                 pk(~ltkS), 
                                                                 <'time', $sig_alg, pk(~ltkE)>, 
                                                                 $sig_alg>,
                                                                ~ltkS)
                                                          >, 
                                                          pk(~ltkS)>)
                                                      >,
                                                      ~ltkE)
                                                >)
                                             >)
                                       >)
                                    >,
                                    '32')
                  ) @ #l )
      qed
    qed
  next
    case case_2
    by solve( RevealPSK( actor, Expand(p_sats, <'adke_wk', '0'>, '32')
              ) @ #l )
  qed
next
  case recv_client_auth
  solve( (∃ #j. (!KU( p_cats ) @ #j) ∧ #j < #vk)  ∥
         ((∀ #k. (!KU( p_cats ) @ #k) ⇒ ¬(#k < #vk)) ∧
          (∃ actor #l.
            (RevealPSK( actor, Expand(p_cats, <'adke_wk', '0'>, '32') ) @ #l)
           ∧
            #l < #vk)) )
    case case_1
    by solve( F_State_S3( ~tid, $S, $C, p_res_psk, p_messages, p_nc,
                          p_ns, p_g, p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode,
                          p_psk_id, p_edi, p_es, p_hs, Extract('0', p_hs), p_cats, p_sats,
                          p_hs_keyc, p_hs_keys, <pas, 'auth'>, p_ems, p_rms, '0'
              )[no_precomp] ▶₀ #i )
  next
    case case_2
    by solve( RevealPSK( actor, Expand(p_cats, <'adke_wk', '0'>, '32')
              ) @ #l )
  qed
next
  case recv_client_auth_cert
  solve( (∃ #j. (!KU( p_cats ) @ #j) ∧ #j < #vk)  ∥
         ((∀ #k. (!KU( p_cats ) @ #k) ⇒ ¬(#k < #vk)) ∧
          (∃ actor #l.
            (RevealPSK( actor, Expand(p_cats, <'adke_wk', '0'>, '32') ) @ #l)
           ∧
            #l < #vk)) )
    case case_1
    solve( !Pk( $C, pk(~ltkC) ) ▶₁ #i )
      case Register_pk
      solve( F_State_S3( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns,
                         p_g, p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode,
                         p_psk_id, p_edi, p_es, p_hs, Extract('0', p_hs), p_cats, p_sats,
                         p_hs_keyc, p_hs_keys, p_auth_status, p_ems, p_rms, '1'
             )[no_precomp] ▶₀ #i )
        case server_auth
        solve( (∃ #j.2.
                 (!KU( Extract('0', p_hs) ) @ #j.2) ∧ #j.2 < #j.1)  ∥
               ((∀ #k. (!KU( Extract('0', p_hs) ) @ #k) ⇒ ¬(#k < #j.1)) ∧
                (∃ actor #l.
                  (RevealPSK( actor,
                              Expand(Extract('0', p_hs),
                                     <'clientats', 
                                      h(<
                                         <<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', 
                                          sign(<'server_cv', 
                                                h(<p_messages, '11', '0', 'ce', pk(~ltkS)>)>,
                                               ~ltkS)
                                         >, 
                                         '20', 
                                         hmac(<
                                               Expand(Expand(p_hs,
                                                             <'serverhts', 
                                                              h(<
                                                                 <p_messages, '11', '0', 'ce', 
                                                                  pk(~ltkS)>, 
                                                                 '15', 
                                                                 sign(<'server_cv', 
                                                                       h(<p_messages, '11', '0', 
                                                                          'ce', pk(~ltkS)>)
                                                                      >,
                                                                      ~ltkS)
                                                                >)
                                                             >,
                                                             '32'),
                                                      <'fin', '0'>, '32'), 
                                               h(<<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', 
                                                  sign(<'server_cv', 
                                                        h(<p_messages, '11', '0', 'ce', pk(~ltkS)>)
                                                       >,
                                                       ~ltkS)
                                                 >)
                                              >)
                                        >)
                                     >,
                                     '32')
                   ) @ #l)
                 ∧
                  #l < #j.1)) )
          case case_1
          solve( (∃ #r. (RevLtk( $C ) @ #r) ∧ #r < #i)  ∥
                 (∃ delegate #j #r.
                   (CDC( ~tid, $S, 'server', <$C, delegate> ) @ #j) ∧
                   (RevLtk( delegate ) @ #r)
                  ∧
                   (#j < #i) ∧ (#r < #j))  ∥
                 (∃ tid3 x #r. (RevDHExp( tid3, $C, x ) @ #r) ∧ #r < #i)  ∥
                 (∃ tid4 y #r. (RevDHExp( tid4, $S, y ) @ #r) ∧ #r < #i)  ∥
                 (∃ rms #r. (RevealPSK( $S, rms ) @ #r) ∧ #r < #k)  ∥
                 (∃ rms #r. (RevealPSK( $C, rms ) @ #r) ∧ #r < #k) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          next
            case case_4
            by contradiction /* from formulas */
          next
            case case_5
            by contradiction /* from formulas */
          next
            case case_6
            by contradiction /* from formulas */
          qed
        next
          case case_2
          by solve( RevealPSK( actor,
                               Expand(Extract('0', p_hs),
                                      <'clientats', 
                                       h(<
                                          <<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', 
                                           sign(<'server_cv', 
                                                 h(<p_messages, '11', '0', 'ce', pk(~ltkS)>)>,
                                                ~ltkS)
                                          >, 
                                          '20', 
                                          hmac(<
                                                Expand(Expand(p_hs,
                                                              <'serverhts', 
                                                               h(<
                                                                  <p_messages, '11', '0', 'ce', 
                                                                   pk(~ltkS)>, 
                                                                  '15', 
                                                                  sign(<'server_cv', 
                                                                        h(<p_messages, '11', '0', 
                                                                           'ce', pk(~ltkS)>)
                                                                       >,
                                                                       ~ltkS)
                                                                 >)
                                                              >,
                                                              '32'),
                                                       <'fin', '0'>, '32'), 
                                                h(<<p_messages, '11', '0', 'ce', pk(~ltkS)>, '15', 
                                                   sign(<'server_cv', 
                                                         h(<p_messages, '11', '0', 'ce', pk(~ltkS)>)
                                                        >,
                                                        ~ltkS)
                                                  >)
                                               >)
                                         >)
                                      >,
                                      '32')
                    ) @ #l )
        qed
      next
        case server_auth_DC
        solve( (∃ #j.2.
                 (!KU( Extract('0', p_hs) ) @ #j.2) ∧ #j.2 < #j.1)  ∥
               ((∀ #k. (!KU( Extract('0', p_hs) ) @ #k) ⇒ ¬(#k < #j.1)) ∧
                (∃ actor #l.
                  (RevealPSK( actor,
                              Expand(Extract('0', p_hs),
                                     <'clientats', 
                                      h(<
                                         <
                                          <p_messages, '11', '0', 
                                           <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                                            sign(<'TLSserverdelegatedcredentials', pk(~ltkS), 
                                                  <'time', $sig_alg, pk(~ltkE)>, $sig_alg>,
                                                 ~ltkS)
                                           >, 
                                           pk(~ltkS)>, 
                                          '15', 
                                          sign(<'server_cv', 
                                                h(<p_messages, '11', '0', 
                                                   <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, 
                                                    $sig_alg, 
                                                    sign(<'TLSserverdelegatedcredentials', 
                                                          pk(~ltkS), <'time', $sig_alg, pk(~ltkE)>, 
                                                          $sig_alg>,
                                                         ~ltkS)
                                                   >, 
                                                   pk(~ltkS)>)
                                               >,
                                               ~ltkE)
                                         >, 
                                         '20', 
                                         hmac(<
                                               Expand(Expand(p_hs,
                                                             <'serverhts', 
                                                              h(<
                                                                 <p_messages, '11', '0', 
                                                                  <'ce', 'TBD', 
                                                                   <'time', $sig_alg, pk(~ltkE)>, 
                                                                   $sig_alg, 
                                                                   sign(<
                                                                         'TLSserverdelegatedcredentials', 
                                                                         pk(~ltkS), 
                                                                         <'time', $sig_alg, 
                                                                          pk(~ltkE)>, 
                                                                         $sig_alg>,
                                                                        ~ltkS)
                                                                  >, 
                                                                  pk(~ltkS)>, 
                                                                 '15', 
                                                                 sign(<'server_cv', 
                                                                       h(<p_messages, '11', '0', 
                                                                          <'ce', 'TBD', 
                                                                           <'time', $sig_alg, 
                                                                            pk(~ltkE)>, 
                                                                           $sig_alg, 
                                                                           sign(<
                                                                                 'TLSserverdelegatedcredentials', 
                                                                                 pk(~ltkS), 
                                                                                 <'time', $sig_alg, 
                                                                                  pk(~ltkE)>, 
                                                                                 $sig_alg>,
                                                                                ~ltkS)
                                                                          >, 
                                                                          pk(~ltkS)>)
                                                                      >,
                                                                      ~ltkE)
                                                                >)
                                                             >,
                                                             '32'),
                                                      <'fin', '0'>, '32'), 
                                               h(<
                                                  <p_messages, '11', '0', 
                                                   <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, 
                                                    $sig_alg, 
                                                    sign(<'TLSserverdelegatedcredentials', 
                                                          pk(~ltkS), <'time', $sig_alg, pk(~ltkE)>, 
                                                          $sig_alg>,
                                                         ~ltkS)
                                                   >, 
                                                   pk(~ltkS)>, 
                                                  '15', 
                                                  sign(<'server_cv', 
                                                        h(<p_messages, '11', '0', 
                                                           <'ce', 'TBD', 
                                                            <'time', $sig_alg, pk(~ltkE)>, 
                                                            $sig_alg, 
                                                            sign(<'TLSserverdelegatedcredentials', 
                                                                  pk(~ltkS), 
                                                                  <'time', $sig_alg, pk(~ltkE)>, 
                                                                  $sig_alg>,
                                                                 ~ltkS)
                                                           >, 
                                                           pk(~ltkS)>)
                                                       >,
                                                       ~ltkE)
                                                 >)
                                              >)
                                        >)
                                     >,
                                     '32')
                   ) @ #l)
                 ∧
                  #l < #j.1)) )
          case case_1
          solve( (∃ #r. (RevLtk( $C ) @ #r) ∧ #r < #i)  ∥
                 (∃ delegate #j #r.
                   (CDC( ~tid, $S, 'server', <$C, delegate> ) @ #j) ∧
                   (RevLtk( delegate ) @ #r)
                  ∧
                   (#j < #i) ∧ (#r < #j))  ∥
                 (∃ tid3 x #r. (RevDHExp( tid3, $C, x ) @ #r) ∧ #r < #i)  ∥
                 (∃ tid4 y #r. (RevDHExp( tid4, $S, y ) @ #r) ∧ #r < #i)  ∥
                 (∃ rms #r. (RevealPSK( $S, rms ) @ #r) ∧ #r < #k)  ∥
                 (∃ rms #r. (RevealPSK( $C, rms ) @ #r) ∧ #r < #k) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          next
            case case_4
            by contradiction /* from formulas */
          next
            case case_5
            by contradiction /* from formulas */
          next
            case case_6
            by contradiction /* from formulas */
          qed
        next
          case case_2
          by solve( RevealPSK( actor,
                               Expand(Extract('0', p_hs),
                                      <'clientats', 
                                       h(<
                                          <
                                           <p_messages, '11', '0', 
                                            <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, $sig_alg, 
                                             sign(<'TLSserverdelegatedcredentials', pk(~ltkS), 
                                                   <'time', $sig_alg, pk(~ltkE)>, $sig_alg>,
                                                  ~ltkS)
                                            >, 
                                            pk(~ltkS)>, 
                                           '15', 
                                           sign(<'server_cv', 
                                                 h(<p_messages, '11', '0', 
                                                    <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, 
                                                     $sig_alg, 
                                                     sign(<'TLSserverdelegatedcredentials', 
                                                           pk(~ltkS), 
                                                           <'time', $sig_alg, pk(~ltkE)>, $sig_alg>,
                                                          ~ltkS)
                                                    >, 
                                                    pk(~ltkS)>)
                                                >,
                                                ~ltkE)
                                          >, 
                                          '20', 
                                          hmac(<
                                                Expand(Expand(p_hs,
                                                              <'serverhts', 
                                                               h(<
                                                                  <p_messages, '11', '0', 
                                                                   <'ce', 'TBD', 
                                                                    <'time', $sig_alg, pk(~ltkE)>, 
                                                                    $sig_alg, 
                                                                    sign(<
                                                                          'TLSserverdelegatedcredentials', 
                                                                          pk(~ltkS), 
                                                                          <'time', $sig_alg, 
                                                                           pk(~ltkE)>, 
                                                                          $sig_alg>,
                                                                         ~ltkS)
                                                                   >, 
                                                                   pk(~ltkS)>, 
                                                                  '15', 
                                                                  sign(<'server_cv', 
                                                                        h(<p_messages, '11', '0', 
                                                                           <'ce', 'TBD', 
                                                                            <'time', $sig_alg, 
                                                                             pk(~ltkE)>, 
                                                                            $sig_alg, 
                                                                            sign(<
                                                                                  'TLSserverdelegatedcredentials', 
                                                                                  pk(~ltkS), 
                                                                                  <'time', 
                                                                                   $sig_alg, 
                                                                                   pk(~ltkE)>, 
                                                                                  $sig_alg>,
                                                                                 ~ltkS)
                                                                           >, 
                                                                           pk(~ltkS)>)
                                                                       >,
                                                                       ~ltkE)
                                                                 >)
                                                              >,
                                                              '32'),
                                                       <'fin', '0'>, '32'), 
                                                h(<
                                                   <p_messages, '11', '0', 
                                                    <'ce', 'TBD', <'time', $sig_alg, pk(~ltkE)>, 
                                                     $sig_alg, 
                                                     sign(<'TLSserverdelegatedcredentials', 
                                                           pk(~ltkS), 
                                                           <'time', $sig_alg, pk(~ltkE)>, $sig_alg>,
                                                          ~ltkS)
                                                    >, 
                                                    pk(~ltkS)>, 
                                                   '15', 
                                                   sign(<'server_cv', 
                                                         h(<p_messages, '11', '0', 
                                                            <'ce', 'TBD', 
                                                             <'time', $sig_alg, pk(~ltkE)>, 
                                                             $sig_alg, 
                                                             sign(<'TLSserverdelegatedcredentials', 
                                                                   pk(~ltkS), 
                                                                   <'time', $sig_alg, pk(~ltkE)>, 
                                                                   $sig_alg>,
                                                                  ~ltkS)
                                                            >, 
                                                            pk(~ltkS)>)
                                                        >,
                                                        ~ltkE)
                                                  >)
                                               >)
                                         >)
                                      >,
                                      '32')
                    ) @ #l )
        qed
      qed
    qed
  next
    case case_2
    by solve( RevealPSK( actor, Expand(p_cats, <'adke_wk', '0'>, '32')
              ) @ #l )
  qed
qed

lemma pfs_handshake_secret [reuse, hide_lemma=posths_rms_weak]:
  all-traces
  "∀ tid actor peer role hs aas psk_ke_mode #i #k.
    (((((CHS( tid, actor, role, hs ) @ #i) ∧
        (RMode( tid, actor, role, psk_ke_mode ) @ #i)) ∧
       (CIdentity( tid, actor, role, <peer, aas, 'auth'> ) @ #i)) ∧
      (!KU( hs ) @ #k)) ∧
     (¬(psk_ke_mode = '0'))) ⇒
    ((((((∃ #r. (RevLtk( peer ) @ #r) ∧ (#r < #i)) ∨
         (∃ delegate #r.
           ((CDC( tid, actor, role, <peer, delegate> ) @ #i) ∧
            (RevLtk( delegate ) @ #r)) ∧
           (#r < #i))) ∨
        (∃ tid3 x #r. (RevDHExp( tid3, peer, x ) @ #r) ∧ (#r < #i))) ∨
       (∃ tid4 y #r. (RevDHExp( tid4, actor, y ) @ #r) ∧ (#r < #i))) ∨
      (∃ rms #r. (RevealPSK( actor, rms ) @ #r) ∧ (#r < #i))) ∨
     (∃ rms #r. (RevealPSK( peer, rms ) @ #r) ∧ (#r < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ tid actor peer role hs aas psk_ke_mode #i #k.
  (CHS( tid, actor, role, hs ) @ #i) ∧
  (RMode( tid, actor, role, psk_ke_mode ) @ #i) ∧
  (CIdentity( tid, actor, role, <peer, aas, 'auth'> ) @ #i) ∧
  (!KU( hs ) @ #k)
 ∧
  (¬(psk_ke_mode = '0')) ∧
  (∀ #r. (RevLtk( peer ) @ #r) ⇒ ¬(#r < #i)) ∧
  (∀ delegate #r.
    (CDC( tid, actor, role, <peer, delegate> ) @ #i) ∧
    (RevLtk( delegate ) @ #r)
   ⇒
    ¬(#r < #i)) ∧
  (∀ tid3 x #r. (RevDHExp( tid3, peer, x ) @ #r) ⇒ ¬(#r < #i)) ∧
  (∀ tid4 y #r. (RevDHExp( tid4, actor, y ) @ #r) ⇒ ¬(#r < #i)) ∧
  (∀ rms #r. (RevealPSK( actor, rms ) @ #r) ⇒ ¬(#r < #i)) ∧
  (∀ rms #r. (RevealPSK( peer, rms ) @ #r) ⇒ ¬(#r < #i))"
*/
simplify
solve( CHS( tid, actor, role, hs ) @ #i )
  case recv_client_auth
  solve( (∃ #r. (RevLtk( peer ) @ #r) ∧ #r < #i)  ∥
         (∃ delegate #j #r.
           (CDC( ~tid, $S, 'server', <peer, delegate> ) @ #j) ∧
           (RevLtk( delegate ) @ #r)
          ∧
           (#j < #i) ∧ (#r < #j))  ∥
         (∃ tid3 x #r. (RevDHExp( tid3, peer, x ) @ #r) ∧ #r < #i)  ∥
         (∃ tid4 y #r. (RevDHExp( tid4, $S, y ) @ #r) ∧ #r < #i)  ∥
         (∃ rms #r. (RevealPSK( $S, rms ) @ #r) ∧ #r < #k)  ∥
         (∃ rms #r. (RevealPSK( peer, rms ) @ #r) ∧ #r < #k) )
    case case_1
    by contradiction /* from formulas */
  next
    case case_3
    by contradiction /* from formulas */
  next
    case case_4
    by contradiction /* from formulas */
  next
    case case_5
    by solve( RevealPSK( $S, rms ) @ #r )
  next
    case case_6
    by solve( RevealPSK( peer, rms ) @ #r )
  qed
next
  case recv_client_auth_cert
  solve( (∃ #r. (RevLtk( peer ) @ #r) ∧ #r < #i)  ∥
         (∃ delegate #j #r.
           (CDC( ~tid, $S, 'server', <peer, delegate> ) @ #j) ∧
           (RevLtk( delegate ) @ #r)
          ∧
           (#j < #i) ∧ (#r < #j))  ∥
         (∃ tid3 x #r. (RevDHExp( tid3, peer, x ) @ #r) ∧ #r < #i)  ∥
         (∃ tid4 y #r. (RevDHExp( tid4, $S, y ) @ #r) ∧ #r < #i)  ∥
         (∃ rms #r. (RevealPSK( $S, rms ) @ #r) ∧ #r < #k)  ∥
         (∃ rms #r. (RevealPSK( peer, rms ) @ #r) ∧ #r < #k) )
    case case_1
    by contradiction /* from formulas */
  next
    case case_3
    by contradiction /* from formulas */
  next
    case case_4
    by contradiction /* from formulas */
  next
    case case_5
    by solve( RevealPSK( $S, rms ) @ #r )
  next
    case case_6
    by solve( RevealPSK( peer, rms ) @ #r )
  qed
next
  case recv_server_auth
  solve( (∃ #r. (RevLtk( peer ) @ #r) ∧ #r < #i)  ∥
         (∃ delegate #j #r.
           (CDC( ~tid, $C, 'client', <peer, delegate> ) @ #j) ∧
           (RevLtk( delegate ) @ #r)
          ∧
           (#j < #i) ∧ (#r < #j))  ∥
         (∃ tid3 x #r. (RevDHExp( tid3, peer, x ) @ #r) ∧ #r < #i)  ∥
         (∃ tid4 y #r. (RevDHExp( tid4, $C, y ) @ #r) ∧ #r < #i)  ∥
         (∃ rms #r. (RevealPSK( $C, rms ) @ #r) ∧ #r < #k)  ∥
         (∃ rms #r. (RevealPSK( peer, rms ) @ #r) ∧ #r < #k) )
    case case_1
    by contradiction /* from formulas */
  next
    case case_3
    by contradiction /* from formulas */
  next
    case case_4
    by contradiction /* from formulas */
  next
    case case_5
    by solve( RevealPSK( $C, rms ) @ #r )
  next
    case case_6
    by solve( RevealPSK( peer, rms ) @ #r )
  qed
next
  case recv_server_auth_DC
  solve( (∃ #r. (RevLtk( peer ) @ #r) ∧ #r < #i)  ∥
         (∃ delegate #j #r.
           (CDC( ~tid, $C, 'client', <peer, delegate> ) @ #j) ∧
           (RevLtk( delegate ) @ #r)
          ∧
           (#j < #i) ∧ (#r < #j))  ∥
         (∃ tid3 x #r. (RevDHExp( tid3, peer, x ) @ #r) ∧ #r < #i)  ∥
         (∃ tid4 y #r. (RevDHExp( tid4, $C, y ) @ #r) ∧ #r < #i)  ∥
         (∃ rms #r. (RevealPSK( $C, rms ) @ #r) ∧ #r < #k)  ∥
         (∃ rms #r. (RevealPSK( peer, rms ) @ #r) ∧ #r < #k) )
    case case_1
    by contradiction /* from formulas */
  next
    case case_2
    by contradiction /* cyclic */
  next
    case case_3
    by contradiction /* from formulas */
  next
    case case_4
    by contradiction /* from formulas */
  next
    case case_5
    by solve( RevealPSK( $C, rms ) @ #r )
  next
    case case_6
    by solve( RevealPSK( peer, rms ) @ #r )
  qed
qed

lemma secret_session_keys_pfs [hide_lemma=sig_origin,
                               hide_lemma=posths_rms]:
  all-traces
  "∀ tid actor peer role kw kr pas psk_ke_mode #i.
    (((((((((SessionKey( tid, actor, peer, <pas, 'auth'>, <kw, kr>
             ) @ #i) ∧
            (RMode( tid, actor, role, psk_ke_mode ) @ #i)) ∧
           (¬(∃ #r. (RevLtk( peer ) @ #r) ∧ (#r < #i)))) ∧
          (¬(∃ delegate role.1 #r.
              ((CDC( tid, actor, role.1, <peer, delegate> ) @ #i) ∧
               (RevLtk( delegate ) @ #r)) ∧
              (#r < #i)))) ∧
         (¬(∃ tid3 x #r. (RevDHExp( tid3, peer, x ) @ #r) ∧ (#r < #i)))) ∧
        (¬(∃ tid4 y #r. (RevDHExp( tid4, actor, y ) @ #r) ∧ (#r < #i)))) ∧
       (¬(∃ rms #r. (RevealPSK( actor, rms ) @ #r) ∧ (#r < #i)))) ∧
      (¬(∃ rms #r. (RevealPSK( peer, rms ) @ #r) ∧ (#r < #i)))) ∧
     (¬(psk_ke_mode = '0'))) ⇒
    (¬(∃ #j. K( kr ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ tid actor peer role kw kr pas psk_ke_mode #i.
  (SessionKey( tid, actor, peer, <pas, 'auth'>, <kw, kr> ) @ #i) ∧
  (RMode( tid, actor, role, psk_ke_mode ) @ #i)
 ∧
  (∀ #r. (RevLtk( peer ) @ #r) ⇒ ¬(#r < #i)) ∧
  (∀ delegate role.1 #r.
    (CDC( tid, actor, role.1, <peer, delegate> ) @ #i) ∧
    (RevLtk( delegate ) @ #r)
   ⇒
    ¬(#r < #i)) ∧
  (∀ tid3 x #r. (RevDHExp( tid3, peer, x ) @ #r) ⇒ ¬(#r < #i)) ∧
  (∀ tid4 y #r. (RevDHExp( tid4, actor, y ) @ #r) ⇒ ¬(#r < #i)) ∧
  (∀ rms #r. (RevealPSK( actor, rms ) @ #r) ⇒ ¬(#r < #i)) ∧
  (∀ rms #r. (RevealPSK( peer, rms ) @ #r) ⇒ ¬(#r < #i)) ∧
  (¬(psk_ke_mode = '0')) ∧
  (∃ #j. (K( kr ) @ #j))"
*/
simplify
solve( SessionKey( tid, actor, peer, <pas, 'auth'>, <kw, kr>
       ) @ #i )
  case client_auth
  by sorry
next
  case client_auth_cert
  by sorry
next
  case recv_client_auth
  by sorry
next
  case recv_client_auth_cert
  by sorry
qed

lemma unique_session_keys:
  all-traces
  "∀ tid tid2 actor peer peer2 kr kw as as2 #i #j.
    ((SessionKey( tid, actor, peer, as, <kr, kw> ) @ #i) ∧
     (SessionKey( tid2, actor, peer2, as2, <kr, kw> ) @ #j)) ⇒
    (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid tid2 actor peer peer2 kr kw as as2 #i #j.
  (SessionKey( tid, actor, peer, as, <kr, kw> ) @ #i) ∧
  (SessionKey( tid2, actor, peer2, as2, <kr, kw> ) @ #j)
 ∧
  ¬(#i = #j)"
*/
by sorry

lemma consistent_nonces [reuse, heuristic=S]:
  all-traces
  "∀ tid actor role nonces #i.
    (CNonces( tid, actor, role, nonces ) @ #i) ⇒
    (∃ #j. RNonces( tid, actor, role, nonces ) @ #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid actor role nonces #i.
  (CNonces( tid, actor, role, nonces ) @ #i)
 ∧
  ∀ #j. (RNonces( tid, actor, role, nonces ) @ #j) ⇒ ⊥"
*/
by sorry

lemma auth_psk [reuse, use_induction, hide_lemma=posths_rms_weak]:
  all-traces
  "∀ tid tid2 actor actor2 role role2 peer peer2 rms messages aas #i
     #j #k.
    ((((RRMS( tid, actor, role, <peer2, rms, messages> ) @ #i) ∧
       (RRMS( tid2, peer, role2, <actor2, rms, messages> ) @ #j)) ∧
      (CIdentity( tid, actor, role, <peer2, aas, 'auth'> ) @ #k)) ∧
     (¬(role = role2))) ⇒
    ((peer2 = peer) ∨ (∃ #r. (RevLtk( peer2 ) @ #r) ∧ (#r < #k)))"
/*
guarded formula characterizing all counter-examples:
"∃ tid tid2 actor actor2 role role2 peer peer2 rms messages aas #i
   #j #k.
  (RRMS( tid, actor, role, <peer2, rms, messages> ) @ #i) ∧
  (RRMS( tid2, peer, role2, <actor2, rms, messages> ) @ #j) ∧
  (CIdentity( tid, actor, role, <peer2, aas, 'auth'> ) @ #k)
 ∧
  (¬(role = role2)) ∧
  (¬(peer2 = peer)) ∧
  (∀ #r. (RevLtk( peer2 ) @ #r) ⇒ ¬(#r < #k))"
*/
by sorry

lemma entity_authentication [reuse, use_induction]:
  all-traces
  "∀ tid actor peer nonces cas #i.
    ((((((((CNonces( tid, actor, 'client', nonces ) @ #i) ∧
           (CIdentity( tid, actor, 'client', <peer, cas, 'auth'> ) @ #i)) ∧
          (¬(∃ #r. (RevLtk( peer ) @ #r) ∧ (#r < #i)))) ∧
         (¬(∃ delegate role #r.
             ((CDC( tid, actor, role, <peer, delegate> ) @ #i) ∧
              (RevLtk( delegate ) @ #r)) ∧
             (#r < #i)))) ∧
        (¬(∃ tid3 x #r. (RevDHExp( tid3, peer, x ) @ #r) ∧ (#r < #i)))) ∧
       (¬(∃ tid4 y #r. (RevDHExp( tid4, actor, y ) @ #r) ∧ (#r < #i)))) ∧
      (¬(∃ rms #r. RevealPSK( actor, rms ) @ #r))) ∧
     (¬(∃ rms #r. RevealPSK( peer, rms ) @ #r))) ⇒
    (∃ tid2 #j.
      (RNonces( tid2, peer, 'server', nonces ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ tid actor peer nonces cas #i.
  (CNonces( tid, actor, 'client', nonces ) @ #i) ∧
  (CIdentity( tid, actor, 'client', <peer, cas, 'auth'> ) @ #i)
 ∧
  (∀ #r. (RevLtk( peer ) @ #r) ⇒ ¬(#r < #i)) ∧
  (∀ delegate role #r.
    (CDC( tid, actor, role, <peer, delegate> ) @ #i) ∧
    (RevLtk( delegate ) @ #r)
   ⇒
    ¬(#r < #i)) ∧
  (∀ tid3 x #r. (RevDHExp( tid3, peer, x ) @ #r) ⇒ ¬(#r < #i)) ∧
  (∀ tid4 y #r. (RevDHExp( tid4, actor, y ) @ #r) ⇒ ¬(#r < #i)) ∧
  (∀ rms #r. (RevealPSK( actor, rms ) @ #r) ⇒ ⊥) ∧
  (∀ rms #r. (RevealPSK( peer, rms ) @ #r) ⇒ ⊥) ∧
  (∀ tid2 #j.
    (RNonces( tid2, peer, 'server', nonces ) @ #j) ⇒ ¬(#j < #i))"
*/
by sorry

lemma transcript_agreement [reuse]:
  all-traces
  "∀ tid actor peer transcript cas #i.
    ((((((((CTranscript( tid, actor, 'client', transcript ) @ #i) ∧
           (CIdentity( tid, actor, 'client', <peer, cas, 'auth'> ) @ #i)) ∧
          (¬(∃ #r. (RevLtk( peer ) @ #r) ∧ (#r < #i)))) ∧
         (¬(∃ delegate role #r.
             ((CDC( tid, actor, role, <peer, delegate> ) @ #i) ∧
              (RevLtk( delegate ) @ #r)) ∧
             (#r < #i)))) ∧
        (¬(∃ tid3 x #r. (RevDHExp( tid3, peer, x ) @ #r) ∧ (#r < #i)))) ∧
       (¬(∃ tid4 y #r. (RevDHExp( tid4, actor, y ) @ #r) ∧ (#r < #i)))) ∧
      (¬(∃ rms #r. RevealPSK( actor, rms ) @ #r))) ∧
     (¬(∃ rms #r. RevealPSK( peer, rms ) @ #r))) ⇒
    (∃ tid2 #j.
      (RTranscript( tid2, peer, 'server', transcript ) @ #j) ∧
      (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ tid actor peer transcript cas #i.
  (CTranscript( tid, actor, 'client', transcript ) @ #i) ∧
  (CIdentity( tid, actor, 'client', <peer, cas, 'auth'> ) @ #i)
 ∧
  (∀ #r. (RevLtk( peer ) @ #r) ⇒ ¬(#r < #i)) ∧
  (∀ delegate role #r.
    (CDC( tid, actor, role, <peer, delegate> ) @ #i) ∧
    (RevLtk( delegate ) @ #r)
   ⇒
    ¬(#r < #i)) ∧
  (∀ tid3 x #r. (RevDHExp( tid3, peer, x ) @ #r) ⇒ ¬(#r < #i)) ∧
  (∀ tid4 y #r. (RevDHExp( tid4, actor, y ) @ #r) ⇒ ¬(#r < #i)) ∧
  (∀ rms #r. (RevealPSK( actor, rms ) @ #r) ⇒ ⊥) ∧
  (∀ rms #r. (RevealPSK( peer, rms ) @ #r) ⇒ ⊥) ∧
  (∀ tid2 #j.
    (RTranscript( tid2, peer, 'server', transcript ) @ #j)
   ⇒
    ¬(#j < #i))"
*/
by sorry

lemma mutual_entity_authentication [reuse, use_induction]:
  all-traces
  "∀ tid actor peer nonces sas #i.
    ((((((((CNonces( tid, actor, 'server', nonces ) @ #i) ∧
           (CIdentity( tid, actor, 'server', <peer, sas, 'auth'> ) @ #i)) ∧
          (¬(∃ #r. (RevLtk( peer ) @ #r) ∧ (#r < #i)))) ∧
         (¬(∃ delegate role #r.
             ((CDC( tid, actor, role, <peer, delegate> ) @ #i) ∧
              (RevLtk( delegate ) @ #r)) ∧
             (#r < #i)))) ∧
        (¬(∃ tid3 x #r. (RevDHExp( tid3, peer, x ) @ #r) ∧ (#r < #i)))) ∧
       (¬(∃ tid4 y #r. (RevDHExp( tid4, actor, y ) @ #r) ∧ (#r < #i)))) ∧
      (¬(∃ rms #r. RevealPSK( actor, rms ) @ #r))) ∧
     (¬(∃ rms #r. RevealPSK( peer, rms ) @ #r))) ⇒
    (∃ tid2 #j.
      (RNonces( tid2, peer, 'client', nonces ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ tid actor peer nonces sas #i.
  (CNonces( tid, actor, 'server', nonces ) @ #i) ∧
  (CIdentity( tid, actor, 'server', <peer, sas, 'auth'> ) @ #i)
 ∧
  (∀ #r. (RevLtk( peer ) @ #r) ⇒ ¬(#r < #i)) ∧
  (∀ delegate role #r.
    (CDC( tid, actor, role, <peer, delegate> ) @ #i) ∧
    (RevLtk( delegate ) @ #r)
   ⇒
    ¬(#r < #i)) ∧
  (∀ tid3 x #r. (RevDHExp( tid3, peer, x ) @ #r) ⇒ ¬(#r < #i)) ∧
  (∀ tid4 y #r. (RevDHExp( tid4, actor, y ) @ #r) ⇒ ¬(#r < #i)) ∧
  (∀ rms #r. (RevealPSK( actor, rms ) @ #r) ⇒ ⊥) ∧
  (∀ rms #r. (RevealPSK( peer, rms ) @ #r) ⇒ ⊥) ∧
  (∀ tid2 #j.
    (RNonces( tid2, peer, 'client', nonces ) @ #j) ⇒ ¬(#j < #i))"
*/
by sorry

lemma mutual_transcript_agreement [reuse]:
  all-traces
  "∀ tid actor transcript peer sas #i.
    ((((((((CTranscript( tid, actor, 'server', transcript ) @ #i) ∧
           (CIdentity( tid, actor, 'server', <peer, sas, 'auth'> ) @ #i)) ∧
          (¬(∃ #r. (RevLtk( peer ) @ #r) ∧ (#r < #i)))) ∧
         (¬(∃ delegate role #r.
             ((CDC( tid, actor, role, <peer, delegate> ) @ #i) ∧
              (RevLtk( delegate ) @ #r)) ∧
             (#r < #i)))) ∧
        (¬(∃ tid3 x #r. (RevDHExp( tid3, peer, x ) @ #r) ∧ (#r < #i)))) ∧
       (¬(∃ tid4 y #r. (RevDHExp( tid4, actor, y ) @ #r) ∧ (#r < #i)))) ∧
      (¬(∃ rms #r. RevealPSK( actor, rms ) @ #r))) ∧
     (¬(∃ rms #r. RevealPSK( peer, rms ) @ #r))) ⇒
    (∃ tid2 #j.
      (RTranscript( tid2, peer, 'client', transcript ) @ #j) ∧
      (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ tid actor transcript peer sas #i.
  (CTranscript( tid, actor, 'server', transcript ) @ #i) ∧
  (CIdentity( tid, actor, 'server', <peer, sas, 'auth'> ) @ #i)
 ∧
  (∀ #r. (RevLtk( peer ) @ #r) ⇒ ¬(#r < #i)) ∧
  (∀ delegate role #r.
    (CDC( tid, actor, role, <peer, delegate> ) @ #i) ∧
    (RevLtk( delegate ) @ #r)
   ⇒
    ¬(#r < #i)) ∧
  (∀ tid3 x #r. (RevDHExp( tid3, peer, x ) @ #r) ⇒ ¬(#r < #i)) ∧
  (∀ tid4 y #r. (RevDHExp( tid4, actor, y ) @ #r) ⇒ ¬(#r < #i)) ∧
  (∀ rms #r. (RevealPSK( actor, rms ) @ #r) ⇒ ⊥) ∧
  (∀ rms #r. (RevealPSK( peer, rms ) @ #r) ⇒ ⊥) ∧
  (∀ tid2 #j.
    (RTranscript( tid2, peer, 'client', transcript ) @ #j)
   ⇒
    ¬(#j < #i))"
*/
by sorry

lemma injective_mutual_entity_authentication [reuse,
                                              hide_lemma=posths_rms]:
  all-traces
  "∀ tid actor peer role nonces aas #i.
    ((((((((CNonces( tid, actor, role, nonces ) @ #i) ∧
           (CIdentity( tid, actor, role, <peer, aas, 'auth'> ) @ #i)) ∧
          (¬(∃ #r. (RevLtk( peer ) @ #r) ∧ (#r < #i)))) ∧
         (¬(∃ delegate role.1 #r.
             ((CDC( tid, actor, role.1, <peer, delegate> ) @ #i) ∧
              (RevLtk( delegate ) @ #r)) ∧
             (#r < #i)))) ∧
        (¬(∃ tid3 x #r. (RevDHExp( tid3, peer, x ) @ #r) ∧ (#r < #i)))) ∧
       (¬(∃ tid4 y #r. (RevDHExp( tid4, actor, y ) @ #r) ∧ (#r < #i)))) ∧
      (¬(∃ rms #r. RevealPSK( actor, rms ) @ #r))) ∧
     (¬(∃ rms #r. RevealPSK( peer, rms ) @ #r))) ⇒
    (∃ role2 tid2 #j.
      (((RNonces( tid2, peer, role2, nonces ) @ #j) ∧ (#j < #i)) ∧
       (¬(role = role2))) ∧
      (∀ tid3 peer2 #k.
        (RNonces( tid3, peer2, role2, nonces ) @ #k) ⇒ (#k = #j)))"
/*
guarded formula characterizing all counter-examples:
"∃ tid actor peer role nonces aas #i.
  (CNonces( tid, actor, role, nonces ) @ #i) ∧
  (CIdentity( tid, actor, role, <peer, aas, 'auth'> ) @ #i)
 ∧
  (∀ #r. (RevLtk( peer ) @ #r) ⇒ ¬(#r < #i)) ∧
  (∀ delegate role.1 #r.
    (CDC( tid, actor, role.1, <peer, delegate> ) @ #i) ∧
    (RevLtk( delegate ) @ #r)
   ⇒
    ¬(#r < #i)) ∧
  (∀ tid3 x #r. (RevDHExp( tid3, peer, x ) @ #r) ⇒ ¬(#r < #i)) ∧
  (∀ tid4 y #r. (RevDHExp( tid4, actor, y ) @ #r) ⇒ ¬(#r < #i)) ∧
  (∀ rms #r. (RevealPSK( actor, rms ) @ #r) ⇒ ⊥) ∧
  (∀ rms #r. (RevealPSK( peer, rms ) @ #r) ⇒ ⊥) ∧
  (∀ role2 tid2 #j.
    (RNonces( tid2, peer, role2, nonces ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (role = role2) ∨
     (∃ tid3 peer2 #k.
       (RNonces( tid3, peer2, role2, nonces ) @ #k) ∧ ¬(#k = #j))))"
*/
by sorry

lemma tid_invariant [use_induction, reuse, heuristic=S]:
  all-traces
  "∀ tid actor role #i.
    (Instance( tid, actor, role ) @ #i) ⇒
    (∃ #j. (Start( tid, actor, role ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ tid actor role #i.
  (Instance( tid, actor, role ) @ #i)
 ∧
  ∀ #j. (Start( tid, actor, role ) @ #j) ⇒ ¬(#j < #i)"
*/
by sorry

lemma one_start_per_tid [reuse, heuristic=SC]:
  all-traces
  "∀ tid actor actor2 role role2 #i #j.
    ((Start( tid, actor, role ) @ #i) ∧
     (Start( tid, actor2, role2 ) @ #j)) ⇒
    (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid actor actor2 role role2 #i #j.
  (Start( tid, actor, role ) @ #i) ∧
  (Start( tid, actor2, role2 ) @ #j)
 ∧
  ¬(#i = #j)"
*/
by sorry

lemma ku_fresh_psk [reuse]:
  all-traces
  "∀ ticket res_psk #i #k.
    ((FreshPSK( ticket, res_psk ) @ #i) ∧ (!KU( res_psk ) @ #k)) ⇒
    (∃ actor #j. (RevealPSK( actor, res_psk ) @ #j) ∧ (#j < #k))"
/*
guarded formula characterizing all counter-examples:
"∃ ticket res_psk #i #k.
  (FreshPSK( ticket, res_psk ) @ #i) ∧ (!KU( res_psk ) @ #k)
 ∧
  ∀ actor #j. (RevealPSK( actor, res_psk ) @ #j) ⇒ ¬(#j < #k)"
*/
by sorry

lemma session_key_agreement [hide_lemma=sig_origin]:
  all-traces
  "∀ tid tid2 actor peer actor2 peer2 nonces keys keys2 cas as2 #i #j
     #k #l.
    ((((((((((SessionKey( tid, actor, peer2, <cas, 'auth'>, keys
              ) @ #i) ∧
             (RNonces( tid, actor, 'client', nonces ) @ #j)) ∧
            (SessionKey( tid2, peer, actor2, as2, keys2 ) @ #k)) ∧
           (RNonces( tid2, peer, 'server', nonces ) @ #l)) ∧
          (¬(∃ #r. ((RevLtk( peer ) @ #r) ∧ (#r < #i)) ∧ (#r < #k)))) ∧
         (¬(∃ delegate role #r.
             ((CDC( tid, actor, role, <peer, delegate> ) @ #i) ∧
              (RevLtk( delegate ) @ #r)) ∧
             (#r < #i)))) ∧
        (¬(∃ tid3 x #r.
            ((RevDHExp( tid3, peer, x ) @ #r) ∧ (#r < #i)) ∧ (#r < #k)))) ∧
       (¬(∃ tid4 y #r.
           ((RevDHExp( tid4, actor, y ) @ #r) ∧ (#r < #i)) ∧ (#r < #k)))) ∧
      (¬(∃ rms #r.
          ((RevealPSK( actor, rms ) @ #r) ∧ (#r < #i)) ∧ (#r < #k)))) ∧
     (¬(∃ rms #r.
         ((RevealPSK( peer, rms ) @ #r) ∧ (#r < #i)) ∧ (#r < #k)))) ⇒
    (keys = keys2)"
/*
guarded formula characterizing all counter-examples:
"∃ tid tid2 actor peer actor2 peer2 nonces keys keys2 cas as2 #i #j
   #k #l.
  (SessionKey( tid, actor, peer2, <cas, 'auth'>, keys ) @ #i) ∧
  (RNonces( tid, actor, 'client', nonces ) @ #j) ∧
  (SessionKey( tid2, peer, actor2, as2, keys2 ) @ #k) ∧
  (RNonces( tid2, peer, 'server', nonces ) @ #l)
 ∧
  (∀ #r. (RevLtk( peer ) @ #r) ⇒ ((¬(#r < #i)) ∨ (¬(#r < #k)))) ∧
  (∀ delegate role #r.
    (CDC( tid, actor, role, <peer, delegate> ) @ #i) ∧
    (RevLtk( delegate ) @ #r)
   ⇒
    ¬(#r < #i)) ∧
  (∀ tid3 x #r.
    (RevDHExp( tid3, peer, x ) @ #r) ⇒ ((¬(#r < #i)) ∨ (¬(#r < #k)))) ∧
  (∀ tid4 y #r.
    (RevDHExp( tid4, actor, y ) @ #r)
   ⇒
    ((¬(#r < #i)) ∨ (¬(#r < #k)))) ∧
  (∀ rms #r.
    (RevealPSK( actor, rms ) @ #r) ⇒ ((¬(#r < #i)) ∨ (¬(#r < #k)))) ∧
  (∀ rms #r.
    (RevealPSK( peer, rms ) @ #r) ⇒ ((¬(#r < #i)) ∨ (¬(#r < #k)))) ∧
  (¬(keys = keys2))"
*/
by sorry

/*
WARNING: the following wellformedness checks failed!

Lemma actions:
  lemma `one_S1_PSK_per_tid' references action 
    (ProtoFact Linear "S1_PSK" 1,1,Linear)
  but no rule has such an action.
  
  lemma `one_S1_PSK_DHE_per_tid' references action 
    (ProtoFact Linear "S1_PSK_DHE" 1,1,Linear)
  but no rule has such an action.
  
  lemma `one_C1_PSK_per_tid' references action 
    (ProtoFact Linear "C1_PSK" 1,1,Linear)
  but no rule has such an action.
  
  lemma `one_C1_PSK_DHE_per_tid' references action 
    (ProtoFact Linear "C1_PSK_DHE" 1,1,Linear)
  but no rule has such an action.
  
  lemma `one_S2d_PSK_per_tid' references action 
    (ProtoFact Linear "S2d_PSK" 1,1,Linear)
  but no rule has such an action.
  
  lemma `one_C2d_PSK_per_tid' references action 
    (ProtoFact Linear "C2d_PSK" 1,1,Linear)
  but no rule has such an action.
  
  lemma `S1_vs_S1_PSK_DHE' references action 
    (ProtoFact Linear "S1_PSK_DHE" 1,1,Linear)
  but no rule has such an action.
  
  lemma `S1_PSK_vs_S1_PSK_DHE' references action 
    (ProtoFact Linear "S1_PSK" 1,1,Linear)
  but no rule has such an action.
  
  lemma `S1_PSK_vs_S1_PSK_DHE' references action 
    (ProtoFact Linear "S1_PSK_DHE" 1,1,Linear)
  but no rule has such an action.
  
  lemma `S1_PSK_vs_S1' references action 
    (ProtoFact Linear "S1_PSK" 1,1,Linear)
  but no rule has such an action.
  
  lemma `C1_vs_C1_PSK_DHE' references action 
    (ProtoFact Linear "C1_PSK_DHE" 1,1,Linear)
  but no rule has such an action.
  
  lemma `C1_PSK_vs_C1_PSK_DHE' references action 
    (ProtoFact Linear "C1_PSK" 1,1,Linear)
  but no rule has such an action.
  
  lemma `C1_PSK_vs_C1_PSK_DHE' references action 
    (ProtoFact Linear "C1_PSK_DHE" 1,1,Linear)
  but no rule has such an action.
  
  lemma `C1_PSK_vs_C1' references action 
    (ProtoFact Linear "C1_PSK" 1,1,Linear)
  but no rule has such an action.
  
  lemma `S2d_vs_S2d_PSK' references action 
    (ProtoFact Linear "S2d_PSK" 1,1,Linear)
  but no rule has such an action.
  
  lemma `C2d_vs_C2d_PSK' references action 
    (ProtoFact Linear "C2d_PSK" 1,1,Linear)
  but no rule has such an action.
  
  lemma `nst_source' references action 
    (ProtoFact Linear "RNST" 4,4,Linear)
  but no rule has such an action.
  
  lemma `ku_expand' references action 
    (ProtoFact Linear "RevealPSK" 2,2,Linear)
  but no rule has such an action.
  
  lemma `posths_rms' references action 
    (ProtoFact Linear "CIdentityPost" 4,4,Linear)
  but no rule has such an action.
  
  lemma `posths_rms' references action 
    (ProtoFact Linear "RPostHS" 4,4,Linear)
  but no rule has such an action.
  
  lemma `rms_derives_hs' references action 
    (ProtoFact Linear "RevealPSK" 2,2,Linear)
  but no rule has such an action.
  
  lemma `rms_derives_hs' references action 
    (ProtoFact Linear "RevealPSK" 2,2,Linear)
  but no rule has such an action.
  
  lemma `post_master_secret' references action 
    (ProtoFact Linear "CIdentityPost" 4,4,Linear)
  but no rule has such an action.
  
  lemma `post_master_secret' references action 
    (ProtoFact Linear "RPostHS" 4,4,Linear)
  but no rule has such an action.
  
  lemma `post_master_secret' references action 
    (ProtoFact Linear "RevDHExp" 3,3,Linear)
  but no rule has such an action.
  
  lemma `post_master_secret' references action 
    (ProtoFact Linear "RevDHExp" 3,3,Linear)
  but no rule has such an action.
  
  lemma `post_master_secret' references action 
    (ProtoFact Linear "RevealPSK" 2,2,Linear)
  but no rule has such an action.
  
  lemma `post_master_secret' references action 
    (ProtoFact Linear "RevealPSK" 2,2,Linear)
  but no rule has such an action.
  
  lemma `invariant_post_hs' references action 
    (ProtoFact Linear "RPostHS" 4,4,Linear)
  but no rule has such an action.
  
  lemma `invariant_post_hs' references action 
    (ProtoFact Linear "RPostHS" 4,4,Linear)
  but no rule has such an action.
  
  lemma `handshake_secret' references action 
    (ProtoFact Linear "RevDHExp" 3,3,Linear)
  but no rule has such an action.
  
  lemma `handshake_secret' references action 
    (ProtoFact Linear "RevDHExp" 3,3,Linear)
  but no rule has such an action.
  
  lemma `handshake_secret' references action 
    (ProtoFact Linear "RevealPSK" 2,2,Linear)
  but no rule has such an action.
  
  lemma `handshake_secret' references action 
    (ProtoFact Linear "RevealPSK" 2,2,Linear)
  but no rule has such an action.
  
  lemma `secret_session_keys' references action 
    (ProtoFact Linear "RevDHExp" 3,3,Linear)
  but no rule has such an action.
  
  lemma `secret_session_keys' references action 
    (ProtoFact Linear "RevDHExp" 3,3,Linear)
  but no rule has such an action.
  
  lemma `secret_session_keys' references action 
    (ProtoFact Linear "RevealPSK" 2,2,Linear)
  but no rule has such an action.
  
  lemma `secret_session_keys' references action 
    (ProtoFact Linear "RevealPSK" 2,2,Linear)
  but no rule has such an action.
  
  lemma `pfs_handshake_secret' references action 
    (ProtoFact Linear "RevDHExp" 3,3,Linear)
  but no rule has such an action.
  
  lemma `pfs_handshake_secret' references action 
    (ProtoFact Linear "RevDHExp" 3,3,Linear)
  but no rule has such an action.
  
  lemma `pfs_handshake_secret' references action 
    (ProtoFact Linear "RevealPSK" 2,2,Linear)
  but no rule has such an action.
  
  lemma `pfs_handshake_secret' references action 
    (ProtoFact Linear "RevealPSK" 2,2,Linear)
  but no rule has such an action.
  
  lemma `secret_session_keys_pfs' references action 
    (ProtoFact Linear "RevDHExp" 3,3,Linear)
  but no rule has such an action.
  
  lemma `secret_session_keys_pfs' references action 
    (ProtoFact Linear "RevDHExp" 3,3,Linear)
  but no rule has such an action.
  
  lemma `secret_session_keys_pfs' references action 
    (ProtoFact Linear "RevealPSK" 2,2,Linear)
  but no rule has such an action.
  
  lemma `secret_session_keys_pfs' references action 
    (ProtoFact Linear "RevealPSK" 2,2,Linear)
  but no rule has such an action.
  
  lemma `entity_authentication' references action 
    (ProtoFact Linear "RevDHExp" 3,3,Linear)
  but no rule has such an action.
  
  lemma `entity_authentication' references action 
    (ProtoFact Linear "RevDHExp" 3,3,Linear)
  but no rule has such an action.
  
  lemma `entity_authentication' references action 
    (ProtoFact Linear "RevealPSK" 2,2,Linear)
  but no rule has such an action.
  
  lemma `entity_authentication' references action 
    (ProtoFact Linear "RevealPSK" 2,2,Linear)
  but no rule has such an action.
  
  lemma `transcript_agreement' references action 
    (ProtoFact Linear "RevDHExp" 3,3,Linear)
  but no rule has such an action.
  
  lemma `transcript_agreement' references action 
    (ProtoFact Linear "RevDHExp" 3,3,Linear)
  but no rule has such an action.
  
  lemma `transcript_agreement' references action 
    (ProtoFact Linear "RevealPSK" 2,2,Linear)
  but no rule has such an action.
  
  lemma `transcript_agreement' references action 
    (ProtoFact Linear "RevealPSK" 2,2,Linear)
  but no rule has such an action.
  
  lemma `mutual_entity_authentication' references action 
    (ProtoFact Linear "RevDHExp" 3,3,Linear)
  but no rule has such an action.
  
  lemma `mutual_entity_authentication' references action 
    (ProtoFact Linear "RevDHExp" 3,3,Linear)
  but no rule has such an action.
  
  lemma `mutual_entity_authentication' references action 
    (ProtoFact Linear "RevealPSK" 2,2,Linear)
  but no rule has such an action.
  
  lemma `mutual_entity_authentication' references action 
    (ProtoFact Linear "RevealPSK" 2,2,Linear)
  but no rule has such an action.
  
  lemma `mutual_transcript_agreement' references action 
    (ProtoFact Linear "RevDHExp" 3,3,Linear)
  but no rule has such an action.
  
  lemma `mutual_transcript_agreement' references action 
    (ProtoFact Linear "RevDHExp" 3,3,Linear)
  but no rule has such an action.
  
  lemma `mutual_transcript_agreement' references action 
    (ProtoFact Linear "RevealPSK" 2,2,Linear)
  but no rule has such an action.
  
  lemma `mutual_transcript_agreement' references action 
    (ProtoFact Linear "RevealPSK" 2,2,Linear)
  but no rule has such an action.
  
  lemma `injective_mutual_entity_authentication' references action 
    (ProtoFact Linear "RevDHExp" 3,3,Linear)
  but no rule has such an action.
  
  lemma `injective_mutual_entity_authentication' references action 
    (ProtoFact Linear "RevDHExp" 3,3,Linear)
  but no rule has such an action.
  
  lemma `injective_mutual_entity_authentication' references action 
    (ProtoFact Linear "RevealPSK" 2,2,Linear)
  but no rule has such an action.
  
  lemma `injective_mutual_entity_authentication' references action 
    (ProtoFact Linear "RevealPSK" 2,2,Linear)
  but no rule has such an action.
  
  lemma `ku_fresh_psk' references action 
    (ProtoFact Linear "FreshPSK" 2,2,Linear)
  but no rule has such an action.
  
  lemma `ku_fresh_psk' references action 
    (ProtoFact Linear "RevealPSK" 2,2,Linear)
  but no rule has such an action.
  
  lemma `session_key_agreement' references action 
    (ProtoFact Linear "RevDHExp" 3,3,Linear)
  but no rule has such an action.
  
  lemma `session_key_agreement' references action 
    (ProtoFact Linear "RevDHExp" 3,3,Linear)
  but no rule has such an action.
  
  lemma `session_key_agreement' references action 
    (ProtoFact Linear "RevealPSK" 2,2,Linear)
  but no rule has such an action.
  
  lemma `session_key_agreement' references action 
    (ProtoFact Linear "RevealPSK" 2,2,Linear)
  but no rule has such an action.
*/

end